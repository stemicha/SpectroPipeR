---
title: "SpectroPipeR DIA-MS analysis report"
author: "Stephan Michalik"
date: '`r format(Sys.Date(), "%B %d, %Y")`'
title-block-banner: "#151515"
subtitle: "automatically generated report"
page-layout: full
css: styles.css
format:
  html:
    toc: true
    toc-depth: 3
    toc-title: Contents
    theme: united
    highlight: tango
    df_print: paged
    toc-location: left # default is right, option is 'body'
    html-math-method: katex
    self-contained: true
    anchor-sections: true
    smooth-scroll: true
params:
  output_folder: NA
  sample_length: NA
  parameter_tibble: NA
  filter_oxidized_peptides: NA
  batch_adjusting: NA
  protein_intensity_estimation: NA
  stat_test: NA
  project_samples_aggregated: NA
  project_samples: NA
  protein_counts: NA
  protein_counts_condense: NA
  protein_count_plot_all: NA
  protein_count_plot_filtered: NA
  MaxLFQ_intensity_distribution_plot: NA
  cumsum_CV_20percent: NA
  cumsum_CV_plot: NA
  ion_id_rate: NA
  UpSetR_PG_2_peptides_ID_wide_binary: NA
  PG_2_peptides_ID_wide_binary: NA
  normalization_factors: NA
  normalization_boxplot: NA
  ion_int_ident_boxplot: NA
  protein_normalization_plot: NA
  protein_normalization_boxplot: NA
  pca_1_2_plot_cond: NA
  pca_1_2_plot_rep: NA
  pca_1_2_plot_measurement_order: NA
  PCA_3d_plot_protein: NA
  pca_overview_plot: NA
  pca_1_5_plot_pep: NA
  pca_1_5_plot_prot: NA
  pca_1_5_plot_pep_measurement_order: NA
  pca_1_5_plot_prot_measurement_order: NA
  pca_contrib: NA
  umap_plot: NA
  correlation_plot: NA
  cv_plot: NA
  statistics: NA
  Protein_intensity_benchmark__barplot: NA
  statistics_2_pep: NA
  statistics_iBAQ_2_pep: NA
  quantile_color_gradient_plot: NA
  quantile_color_gradient_tidy: NA
  statistics_comparison: NA
  volcano_plots_pFDR: NA
  volcano_plots_effSize_pFDR: NA
  volcano_plots_pRAW: NA
  cutoff_simple_test_plot: NA
  cutoff_test_plot: NA
---


```{r global.options, include = F}
knitr::opts_chunk$set(
    cache       = FALSE,     # if TRUE knitr will cache the results to reuse in future knits
    fig.align   = 'center', # how to align graphics in the final doc. 'left', 'right', 'center'
    echo        = FALSE,     # in FALSE knitr will not display code in the code chunk above it's results
    message     = TRUE,     # if FALSE knitr will not display any messages generated by code
    eval        = TRUE,     # if FALSE knitr will not display any messages generated by code
    strip.white = TRUE,     # if FALSE knitr will not remove white spaces at the beg or end of code chunk
    warning     = FALSE,
    cols.min.print = 10,
    highlight = T,
    rows.print = 10)    # if FALSE knitr will not display any warning messages in the final document
```



  <!-- setup and insert packages -->  

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(tidyverse))
suppressMessages(library(DT))
suppressMessages(library(kableExtra))
suppressMessages(library(readxl))
suppressMessages(library(htmltools))
suppressMessages(library(htmlwidgets))

```

**How to cite SpectroPipeR**

Reder, A., Hentschker, C., Steil, L., Gesell Salazar, M., Hammer, E., Dhople, V. M., Sura, T., Lissner, U., Wolfgramm, H., Dittmar, D., Harms, M., Surmann, K., Völker, U., & Michalik, S. (2024). MassSpecPreppy—An end-to-end solution for automated protein concentration determination and flexible sample digestion for proteomics applications. Proteomics, 24, e2300294. https://doi.org/10.1002/pmic.202300294

# Data analysis description

The whole analysis was performed using  `r R.Version()$version.string` and SpectroPipeR package `r packageVersion('SpectroPipeR')`.


The raw data output from Spectronaut was utilized for normalization purposes. If the normalization option in Spectronaut was unchecked, a median normalization was performed over the MS2 total peak area intensities. Alternatively, if the normalization method was selected in Spectronaut™, the corresponding normalization approach provided by Spectronaut™ was employed.

Zero intensity values were replaced using the half-minimal intensity value from the whole dataset.

`r if(params$filter_oxidized_peptides == T){ "Methionine oxidized peptides were removed from the analysis."}`

To obtain peptide intensity data,  the intensities of all ions corresponding to a given peptide were summed up within each sample.

`r if(params$batch_adjusting == "TRUE"){"Batch effects refer to systematic differences between batches (groups) of samples in high-throughput experiments. <br> These differences can arise due to various factors, such as batch variations in sample preparation, handling, processing procedures and measurement orders. Batch effects can obscure the true biological signal and lead to incorrect conclusions if not properly accounted for. <br> In the SpectroPipeR pipeline, the ComBat tool was employed to adjust for batch effects in the datasets where the batch covariate was known. ComBat utilizes the methodology described in [Johnson et al. 2007](https://pubmed.ncbi.nlm.nih.gov/16632515/).<br> It uses an empirical Bayes (EB) framework for adjusting data for batch effects that is robust to outliers in small sample sizes and performs comparable to existing methods for large samples.<br> [Johnson et al. 2007:](https://pubmed.ncbi.nlm.nih.gov/16632515/) <br> This method incorporates systematic batch biases common across genes in making adjustments, assuming that phenomena resulting in batch effects often affect many genes in similar ways (i.e. increased expression, higher variability, etc). Specifically, the L/S model parameters are estimated that represent the batch effects by pooling information across peptides in each batch to shrink the batch effect parameter estimates toward the overall mean of the batch effect estimates (across peptides). These EB estimates are then used to adjust the data for batch effects, providing more robust adjustments for the batch effect on each peptide.<br> In SpectroPipeR a parametric ComBAT emperical Bayes adjustment is implemented by utilizing the sva-package."}`

If a covariate adjustment of peptide intensity data was performed using the users input formula, a linear mixed model (LMM) was calculated based on that formula per peptide and the outcoming residuals were added to the mean peptide intensity over the samples. This means that the adjusted peptide intensities retain their intensity level (low intense peptides keep their low intensity and high intense ions keep their higher intensity).

`r if(params$protein_intensity_estimation == "Hi3"){ "The Hi3 protein intensity data was generated through the following steps:<br> - For each protein, 2-3 high-intensity peptides common across all samples were identified using the median intensity values. <br> - The average intensity was calculated for the selected high-intensity (Hi3) peptides representing each protein.<br> - A global median normalization was applied to the averaged peptide intensities, resulting in the final Hi3 protein intensity data."}`

`r if(params$protein_intensity_estimation == "MaxLFQ"){paste0("The MaxLFQ protein intensity data was generated by using the MaxLFQ algorithm implemented in the iq R-package (version", packageVersion('iq'),") followed by a global median normalization.")}`


The principle component analysis for peptide and protein level was done using the factomineR package (version: `r packageVersion('FactoMineR')`), where data was scaled to unit variance.

The UMAP analysis was performed using the umap package (version `r packageVersion('umap')`).

The statistical analysis was performed on peptide level using the PECA package (version: `r packageVersion('PECA')`)

`r if(params$stat_test=="modt"){paste0("Here a **modified t-test (modt)** implemented in the PECA package (version", packageVersion('PECA'),") was used to perform the statistical analysis.")}`

`r if(params$stat_test=="rots"){paste0("Here a **ROTS test**  was used to perform the statistical analysis implemented in the PECA package (version", packageVersion('PECA'),") aka ROPECA (Reproducibility-Optimized Peptide Change Averaging) approach. ROPECA is a statistical method for analyzing proteomics data, specifically designed for data-independent acquisition (DIA) mass spectrometry experiments (Seyednasrollah, F., Rantanen, K., Jaakkola, P., Elo, L. (2016). It aims to maximize the reproducibility of the detections by optimizing the overlap of significant peptides between replicate samples.")}`

::: {.callout-note collapse='true'}
## modt

The modified t-statistic is calculated using the linear modeling approach in the Bioconductor limma package.
An empirical Bayes method to squeeze the protein-wise residual variances towards a common value (or towards a global trend) (Smyth, 2004; Phipson *et al.*, 2016).
The degrees of freedom for the individual variances are increased to reflect the extra information gained from the empirical Bayes moderation, resulting in increased statistical power to detect differential expression.
:::

::: {.callout-note collapse='true'} 
## Reproducibility-Optimized Test Statistic (ROTS)

ROTS: reproducible RNA-seq biomarker detector-prognostic markers for clear cell renal cell cancer. Nucleic acids research 44(1), e1. https://dx.doi.org/10.1093/nar/gkv806).

ROPECA - Reproducibility-Optimized Peptide Change Averaging - utilizes the ROTS.
ROPECA approach is described in Suomi, T., Elo, L.L. Enhanced differential expression statistics for data-independent acquisition proteomics. Sci Rep 7, 5869 (2017). https://doi.org/10.1038/s41598-017-05949-y<br> 
:::

# pipeline parameters used for the analysis

```{r, echo = F}
knitr::kable(as_tibble(params$parameter_tibble)) %>% 
          kableExtra::kable_styling(bootstrap_options = c('striped', 'hover', 'condensed', 'responsive'))
```


# samples overview
::: {.panel-tabset}
## samples count

```{r, echo = F}
DT::datatable(as_tibble(params$project_samples_aggregated), rownames = F, filter = 'top')
```

## samples

```{r, echo = F}
DT::datatable(as_tibble(params$project_samples),
              rownames = F,
              filter = 'top', 
              options = list(pageLength = 50))
```
:::

# protein counts

In total **`r sum(params$protein_counts_condense$protein_count)`** Protein_groups could be identified.

- `r params$protein_counts_condense$protein_count[which(params$protein_counts_condense$number_of_peptides == '< 2')]` Protein_groups with < 2 peptides.
- `r params$protein_counts_condense$protein_count[which(params$protein_counts_condense$number_of_peptides == '>= 2')]` Protein_groups with >= 2 peptides.

::: {.panel-tabset}
## protein counts (ion q-value filtered)

`r knitr::include_graphics(sub(".", "",str_replace_all(params$protein_count_plot_filtered,params$output_folder,"")))`

## protein counts (whole dataset)

`r knitr::include_graphics(sub(".", "",str_replace_all(params$protein_count_plot_all,params$output_folder,"")))`

:::

# ion ID rate (q-value filtered)

`r knitr::include_graphics(sub(".", "",str_replace_all(params$ion_id_rate,params$output_folder,"")))`


# ON/OFF analysis

The ON/OFF analysis was conducted by filtering the ions based on the chosen Q-value cutoff (**ion Q-value below `r as_tibble(params$parameter_tibble) %>% dplyr::filter(parameter=="ion_q_value_cutoff") %>% dplyr::select(value)`**).
For a protein group to be considered detected in a particular condition, it had to meet the following criteria:

 - The protein group must be represented by at least two peptides.
 - These peptides must be present in at least 50% of the replicates for that specific condition.
 
If these requirements were met, the protein group was designated as "DETECTED" (1) in that condition. Otherwise, it was marked as "NOT DETECTED" (0) for that particular condition.

::: {.panel-tabset}
## ON/OFF - UpSet plot

`r knitr::include_graphics(sub(".","",str_replace_all(params$UpSetR_PG_2_peptides_ID_wide_binary,params$output_folder,"")))`

## ON/OFF - binary coded data

```{r, echo = F}

DT::datatable(as_tibble(params$PG_2_peptides_ID_wide_binary), 
          rownames = F,
          filter = 'top', 
          options = list(pageLength = 20, autoWidth = TRUE),
          caption = 'ON/OFF analysis per condition >= 2 peptides.') %>% 
          formatStyle(columns = colnames(as_data_frame(params$PG_2_peptides_ID_wide_binary))[-1],
                      backgroundColor = styleEqual(c(1,0), 
                                                   c('#1B5E20', '#B71C1C')))

```

:::

# normalization of data

The ion intensity data was normalized either in Spectronaut or in the the pipeline using a median-median normalization on ion level depending on your settings.

```{r, echo = F}
if(length(unique(as_tibble(params$normalization_factors)$normalization_outlier))==1){
cat("No normalization outlier detected !")
}else{
"** normalization outlier detected ! **<br>"
normalization_factors_outlier <- as_tibble(params$normalization_factors) %>% 
                                    dplyr::filter(normalization_outlier=="yes")
# render table 
knitr::kable(normalization_factors_outlier) %>% 
          kableExtra::kable_styling(bootstrap_options = c('striped', 'hover', 'condensed', 'responsive'))
}
```

::: {.panel-tabset}

## normalization plot

`r knitr::include_graphics(sub(".","",str_replace_all(params$protein_normalization_plot,params$output_folder,"")))`

## normalization violin/boxplot

```{r, echo = F}
if(length(params$protein_normalization_boxplot)==0){
cat("Not applicable with paramters used in Spectrionaut !")
}else{
knitr::include_graphics(sub(".", "",str_replace_all(params$protein_normalization_boxplot,params$output_folder,"")))
}
```

## normalization table

`r knitr::kable(as_tibble(params$normalization_factors)) %>% kableExtra::kable_styling(bootstrap_options = c('striped', 'hover', 'condensed', 'responsive'))``

## ion intensity boxplot

`r knitr::include_graphics(sub(".","",str_replace_all(params$normalization_boxplot,params$output_folder,"")))`

## ion intensity of identified and not identified ions

`r knitr::include_graphics(sub(".","",str_replace_all(params$ion_int_ident_boxplot,params$output_folder,"")))`


:::

<!-- include MaxLFQ data distribution -->
`r if(params$protein_intensity_estimation == "MaxLFQ"){paste0("## MaxLFQ intensity distribution")}`

`r if(params$protein_intensity_estimation == "MaxLFQ"){paste0("The MaxLFQ protein intensity data was generated by using the MaxLFQ algorithm implemented in the iq R-package (version ", packageVersion('iq'),") followed by a global median normalization. The distribution of the MaxLFQ data is visualized in the plot below.")}`

`r if(params$protein_intensity_estimation == "MaxLFQ"){knitr::include_graphics(sub(".","",str_replace_all(params$MaxLFQ_intensity_distribution_plot,params$output_folder,"")))}`


# PCA & correlation & UMAP

With the normalized data (peptide or protein intensities) a PCA analysis was performed (data was scaled).

::: {.callout-note collapse="true"}
## PCA

PCA stands for Principal Component Analysis, which is a statistical technique used to reduce the dimensionality of large data sets. It does this by transforming a large set of variables into a smaller one that still contains most of the information in the large set. This is achieved by finding new variables, called principal components, that are linear combinations of the original variables and capture as much of the variation in the data as possible.

The first principal component captures the largest amount of variation in the data, while each subsequent component captures the next largest amount of variation. 

A PCA plot is a visual representation of the results of a Principal Component Analysis (PCA). It can help you understand the relationships between the samples in your data by showing how they cluster together based on their similarity.

Samples that are close together on the plot are similar to each other, while samples that are far apart are dissimilar. The direction and length of the arrows on the plot show how each variable contributes to the first and second principal components.

The first and second dimensions of a PCA plot represent the first and second principal components of the data, respectively. These are the two directions in the data that capture the most variation. The first principal component captures the largest amount of variation in the data, while the second principal component captures the second largest amount of variation.
:::

::: {.callout-note collapse="true"}
## UMAP

UMAP stands for Uniform Manifold Approximation and Projection. It is a dimension reduction technique that can be used for visualization similarly to t-SNE, but also for general non-linear dimension reduction. UMAP is a powerful tool for machine learning practitioners to visualize and understand large, high dimensional datasets. It offers a number of advantages over t-SNE, most notably increased speed and better preservation of the data’s global structure.

To perform a UMAP analysis, the first step is to construct a high-dimensional graph representation of the data. This is done by finding the k-nearest neighbors for each data point and connecting them with edges. The weight of each edge is determined by the distance between the two points it connects. Next, a low-dimensional graph is optimized to be as structurally similar as possible to the high-dimensional graph. This is done using a stochastic gradient descent algorithm that minimizes the cross-entropy between the two graphs.

The result of a UMAP analysis is a low-dimensional representation of the data that can be visualized using a scatter plot. Each point on the plot represents a sample, and its position reflects its values for the first two or three principal components. Samples that are close together on the plot are similar to each other, while samples that are far apart are dissimilar.

In summary, UMAP analysis is performed by constructing a high-dimensional graph representation of the data, then optimizing a low-dimensional graph to be as structurally similar as possible. The result is a low-dimensional representation of the data that can be visualized and used to understand patterns and relationships in the data.
:::

::: {.callout-note collapse="true"}
## Spearman correlation

Spearman’s rank correlation coefficient, also known as Spearman’s ρ (rho), is a nonparametric measure of rank correlation. It is a statistical measure of the strength and direction of the monotonic relationship between two variables. In other words, it assesses how well the relationship between two variables can be described using a monotonic function.

To calculate Spearman’s correlation coefficient, the raw data is first converted into ranks. The Spearman correlation coefficient is then defined as the Pearson correlation coefficient between the rank variables. For a sample of size n, if all n ranks are distinct integers, it can be computed using the formula ρ = 1 - ((6 * Σd_i^2) / (n * (n^2 - 1))), where d_i is the difference between the two ranks of each observation and n is the number of observations.

Spearman’s correlation is appropriate for both continuous and discrete ordinal variables. It is often used as an alternative to Pearson’s correlation when the data does not meet the assumptions of linearity and normality required for Pearson’s correlation. Spearman’s correlation is less sensitive to outliers and can be used for data that follows curvilinear or monotonic relationships.
:::


::: {.panel-tabset}
## PCA 1vs2 dim. conditions marked (protein level)

`r knitr::include_graphics(sub(".", "",str_replace_all(params$pca_1_2_plot_cond,params$output_folder,"")))`

## PCA 1vs2 dim. replicates marked (protein level)

`r knitr::include_graphics(sub(".", "",str_replace_all(params$pca_1_2_plot_rep,params$output_folder,"")))`

## PCA 1vs2 dim. colored by measurement order (protein level)

`r knitr::include_graphics(sub(".", "",str_replace_all(params$pca_1_2_plot_measurement_order,params$output_folder,"")))`

## PCA 3d plot (protein level)

`r htmltools::tags$iframe(src = sub(".", "",str_replace_all(params$PCA_3d_plot_protein,params$output_folder,"")),width = '100%',height = '600px',scrolling = 'no', seamless = 'seamless', frameBorder = '0')`

## PCA overview plot

`r knitr::include_graphics(sub(".", "",str_replace_all(params$pca_overview_plot,params$output_folder,"")))`

## PCA plot 1-5 dim. (pep. level) - condition

`r knitr::include_graphics(sub(".", "",str_replace_all(params$pca_1_5_plot_pep,params$output_folder,"")))`

## PCA plot 1-5 dim. (protein level)- condition

`r knitr::include_graphics(sub(".", "",str_replace_all(params$pca_1_5_plot_prot,params$output_folder,"")))`

## PCA plot 1-5 dim. (pep. level) - measurement order
`r knitr::include_graphics(sub(".", "",str_replace_all(params$pca_1_5_plot_pep_measurement_order,params$output_folder,"")))`

## PCA plot 1-5 dim. (protein level) - measurement order

`r knitr::include_graphics(sub(".", "",str_replace_all(params$pca_1_5_plot_prot_measurement_order,params$output_folder,"")))`

## PCA sample contribution

`r knitr::include_graphics(sub(".", "",str_replace_all(params$pca_contrib,params$output_folder,"")))`

## sample correlation plot

`r knitr::include_graphics(sub(".", "",str_replace_all(params$correlation_plot,params$output_folder,"")))`

## UAMP

```{r, echo = F}

if(length(params$umap_plot)==0){
  cat("UMAP calculation failed due to low complex dataset !")
}else{
  knitr::include_graphics(sub(".", "",str_replace_all(params$umap_plot,params$output_folder,"")))

}

```


:::

# coefficient of variation (CV)

## sample CV plot

The CV, or coefficient of variation, was calculated based on the protein intensity level. The bold pink percentage indicates the percent of the data per condition that is below a CV of 0.1, while the regular pink percentage indicates the data that is below a CV of 0.2. 

`r knitr::include_graphics(sub(".", "",str_replace_all(params$cv_plot,params$output_folder,"")))`

## cumulative frequency of CV

The cumulative frequency of coefficient of variation (CV) graphically represents the cumulative frequency of the Coefficient of Variation (CV) at both the peptide and protein levels. On the x-axis, the coefficient of variation (CV) is plotted, while the y-axis displays the cumulative frequency. The lines are differentiated by color according to the condition. This enables the user to assess and evaluate the reproducibility of measurements across different conditions in the analysis.

`r knitr::include_graphics(sub(".", "",str_replace_all(params$cumsum_CV_plot,params$output_folder,"")))`


# statistics


## pairwise comparison that were performed

```{r, echo = F}
knitr::kable(as_tibble(params$statistics_comparison)) %>% 
           kableExtra::kable_styling(bootstrap_options = c('striped', 'hover', 'condensed', 'responsive'))
```

## raw statistics table

- **get RAW statistical table:**
`r paste0("06_statistics/",unlist(params$sample_length),"_sample_analysis/statistical_analysis.csv")`
- **statistical table with 2 peptide hits (wide format):**
`r paste0("06_statistics/",unlist(params$sample_length),"_sample_analysis/statistical_analysis_WIDE_FORMAT_2_more_peptides_per_protein.xlsx")`
- **or use files filtered for 2 peptides in same folder**

::: {.panel-tabset}

## Volcano-plots (adjusted p-value)

```{r, echo = F}
knitr::include_graphics(sub(".", "",str_replace_all(params$volcano_plots_pFDR,params$output_folder,"")))
```

## Volcano-plots & effect_size estimate (adjusted p-value)

```{r, echo = F}
knitr::include_graphics(sub(".", "",str_replace_all(params$volcano_plots_effSize_pFDR,params$output_folder,"")))
```

## Volcano-plots (raw p-value)

```{r, echo = F}
knitr::include_graphics(sub(".", "",str_replace_all(params$volcano_plots_pRAW,params$output_folder,"")))
```

## simple cutoff test

```{r, echo = F}
knitr::include_graphics(sub(".", "",str_replace_all(params$cutoff_simple_test_plot,params$output_folder,"")))
```

## cutoff test

```{r, echo = F}
knitr::include_graphics(sub(".", "",str_replace_all(params$cutoff_test_plot,params$output_folder,"")))
```

## protein intensity benchmarking in comparison to peptide centric ratios

The bar chart provides a visual representation of the number of proteins that have either under-estimated or over-estimated protein intensity ratios relative to the peptide-centric ratios. This comparison uses a 2-fold difference as the threshold value for determining under-estimation or over-estimation of protein intensity.

::: {.callout-tip}

## example

  - *peptide ratio of comparison* = 2
  - *protein intensity ratio of comparison* = 6

> The comparison ratio of protein intensity to peptide-centric ratio (e.g. ROPECA) is three times greater. This suggests that the estimation of protein intensity for this particular protein/condition comparison may be susceptible to errors. Further examination is warranted, particularly if the ratios are diverging in opposite directions.

You may further investigate this in the `Protein_intensity_benchmark__table*.csv` files in the `05_processed_data` folder.
:::

```{r, echo = F}
knitr::include_graphics(sub(".", "",str_replace_all(params$Protein_intensity_benchmark__barplot,params$output_folder,"")))
```

:::
 <!-- end of Volcanoplot stats panelset -->


## statistics table (≥ 2 peptides)

:::: {.columns}

::: {.column width="40%"}
- **slr (signal-log~2~-ratio) colors: <span style="color:#1874CD;">≤2</span> <<<< <span style="color:#BEBEBE;">0</span> >>>> <span style="color:#CD3601;">≥2</span>**
- **p-value colors: <span style="color:#F48EB1;">≤0.05</span> & <span style="color:#BEBEBE;">>0.05</span>**
:::

::: {.column width="30%"}
- **iBAQ intensity values quantiles (N=10 per group) - comparison:**
:::

::: {.column width="30%"}
![](`r sub(".", "",str_replace_all(params$quantile_color_gradient_plot,params$output_folder,""))`){width=200px}
:::

::::



::: {.panel-tabset}

### interactive statistics table (≥ 2 peptides)

```{r, echo = F}
#DT styles
brks_slr <- seq(-2, 2, 0.1)
clrs_slr <- colorRampPalette(colors = c("dodgerblue3","grey","orangered3"))(length(brks_slr)+1)
clrs_iBAQ_quantiles <- colorRampPalette(colors = c("dodgerblue3","grey","orangered3"))(length(brks_slr)+1)

DT::datatable(as_tibble(params$statistics_iBAQ_2_pep) %>% 
                mutate(p = formatC(p, format = "e", digits = 3),
                       p.fdr = formatC(p.fdr, format = "e", digits = 3),
                       slr = round(slr, digits = 3),
                       fold_change = round(fold_change, digits = 3)) %>% 
                dplyr::rename(iBAQ_quants = iBAQ_quantile_comp,
                       FC = fold_change), 
          rownames = F,
          filter = "top", 
          options = list(pageLength = 20,
                         autoWidth = F),
          caption = "statistics table filter >= 2 peptides.") %>% 
          formatStyle(columns = colnames(.),
                      fontSize = "2pt")%>% 
          formatStyle(columns = c("p","p.fdr"),
                                  backgroundColor = styleInterval(0.05, c("#F48FB1", "gray"))) %>% 
          formatStyle(columns = c("iBAQ_quants"),
                      backgroundColor = styleEqual(unlist(params$quantile_color_gradient_tidy$iBAQ_quantile_comp),
                                                      unlist(params$quantile_color_gradient_tidy$colors))) %>% 
          formatStyle(columns = "slr",
                      color = "black",
                      backgroundColor = styleInterval(brks_slr, clrs_slr))
```

### table column descriptions

- **slr:** signal log2-ratio
- **t:** t-statistics
- **score:** t-statistics
- **p:** raw p-value
- **p.fdr:** adjusted p-value; false-discovery rates; method: Benjamini-Hochberg
- **PG.ProteinGroups:** protein group identifier
- **group1:** condition group 1 of pairwise comparison
- **group2:** condition group 2 of pairwise comparison
- **slr_ratio_meta:** how the ratio was calculated
- **test:** which test was used (ROTS…reproducable optimized test-statistics, modt ...)
- **significant:** if there is a significant change (cutoffs e.g.: FC = 1.5 & adjusted-p-value = 0.05)
- **significant:** if there is a significant change (cutoffs e.g.: FC = 1.5 & adjusted-p-value = 0.05)
- **significant_changed_raw_p:** if there is a significant change (cutoffs e.g.: FC = 1.5 & raw-p-value = 0.05)
- **significant_changed_fc:** fold-change cutoff used
- **significant_changed_p_value:** p-value cutoff used
- **fold_change_absolute:** absolute fold-change
- **fold_change_direction:** fold-change direction
- **fold_change (FC):** fold-change
- **iBAQ_quants:** iBAQ intensity quantiles (N=10 per group); Q1 = lowest intensity quantile / Q10 = highest intensity quantile

:::



# Pipeline description


::: {.panel-tabset}
## Pipeline parameters

|parameter|description|
|----------|--------------------------------------------------------------|
| output_folder | _character_ - output folder path (abs.) |
| ion_q_value_cutoff | _numeric_ - Q-value used in Spectronaut analysis: Biognosys default is 0.01 = 1% error rate |
| id_drop_cutoff | _numeric_ - value between 0-1 (1 = 100%); xx percent lower than median of ion ID rate => outlier |
| normalization_method | _character_ - "median" or "spectronaut; auto-detection is per default ON, meaning if normalization was performed in Spectronaut this will be detected and prefered over parameter setting here; median normalization is the fallback option|
| normalizaion_factor_cutoff_outlier | _numeric_ - median off from global median (4 means abs. 4fold off) |
| filter_oxidized_peptides | _logical_ - if oxidized peptides should be removed from peptide quantification: **TRUE** or **FALSE** |
| protein_intensity_estimation | _character_ - **Hi3** = Hi3 protein intensity estimation, **MaxLFQ** = MaxLFQ protein intensity estimation |
| stat_test | _character_ - choose statistical test: **"rots"** = reproducibility optimized test statistics, **"modt"** = moderate t-test (lmfit, eBayes), **"t"** = t-test |
| type_slr | _character_ - choose ratio aggregation method: "median" or "tukey" is used when calculating protein values |
| fold_change | _numeric_ - fold-change used as cutoff for fold-change filtering e.g. 1.5 |
| p_value_cutoff | _numeric_ - p-value used as cutoff for p/q-value filtering e.g. 0.05 |
| paired | _logical_ - should a paired statistical analysis be performed: **TRUE** or **FALSE** |


### protein intensity calculation

::: {.callout-tip}
## Hi3
  
Hi3 uses the mean over the highest 2-3 peptides per protein defined by the median over the whole dataset.<br><br>
:::

::: {.callout-tip}
## iBAQ

iBAQ stands for Intensity Based Absolute Quantification. It is a method used to estimate the relative abundance of proteins within a sample. In the iBAQ algorithm, the summed intensities of the precursor peptides that map to each protein are divided by the number of theoretically observable peptides, which is considered to be all tryptic peptides between 6 and 30 amino acids in length. This operation converts a measure that is expected to be proportional to the molar quantity of the protein into an absolute quantity.([Quantitative Mass Spectrometry-Based Proteomics: An Overview](https://link.springer.com/protocol/10.1007/978-1-0716-1024-4_8))
:::

::: {.callout-tip}
## MaxLFQ

MaxLFQ stands for Maximal Peptide Ratio Extraction and Label-Free Quantification. It is an algorithm used to estimate protein abundances in mass spectrometry-based proteomics by aiming to maintain the fragment intensity ratios between samples. The MaxLFQ algorithm calculates protein intensities by taking the maximum peptide ratio of all peptides that map to a protein and normalizing it across all samples.

The MaxLFQ algorithm was developed by [Cox et al. in 2014](https://www.mcponline.org/article/S1535-9476%2820%2933310-7/fulltext) and is widely used in label-free quantitative proteomics. It is considered to be an accurate method for proteome-wide label-free quantification.

In more technical terms, the MaxLFQ algorithm calculates ratio between any two samples using the peptide species that are present. The pair-wise protein ratio is then defined as the median of the peptide ratios, to protect against outliers (require a minimal number of two peptide ratios in order for a given protein ratio to be considered valid).At this point the algorithm constructed a triangular matrix containing all pair-wise protein ratios between any two samples, which is the maximal possible quantification information. Then the algorithm perform a least-squares analysis to reconstruct the abundance profile optimally satisfying the individual protein ratios in the matrix based on the sum of squared differences. Then the alg. rescales the whole profile to the cumulative intensity across samples, thereby preserving the total summed intensity for a protein over all samples.
This procedure is repeated for all proteins, resulting in an accurate abundance profile for each protein across the samples.
:::

## Pipeline file description

All plots and tables are saved in subfolders:
*subfolders are generated based on the number of raw files in the Spectronaut output*


```{r, echo = F}

file_description_table <- readxl::read_excel(system.file("extdata",
                                                 "report_output_files_description.xlsx",
                                                 package="SpectroPipeR"))

DT::datatable(file_description_table,rownames = F,options = list(pageLength = -1)) %>% 
  DT::formatStyle(
                columns = "files", 
                display = "block", 
                `overflow-wrap`= 'break-word',
                overflow = 'hidden',
                width = "250px"
            ) 

```

:::
