[{"path":"https://stemicha.github.io/SpectroPipeR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Stephan Michalik Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"requirements","dir":"Articles","previous_headings":"","what":"Requirements","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"SpectroPipeR require Quarto CLI. please make sure installed system ! https://quarto.org/docs/get-started/ SpectroPipeR also requires certain columns Spectronaut output report included default. following steps advised: Proceed download installation SpectroPipeR directed. Utilize Spectronaut_export_scheme() function create necessary Spectronaut report scheme (*.rs). Import generated Spectronaut report scheme. Conduct analysis raw mass spectrometry data Spectronaut produce output report using imported report scheme.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"spectronaut-output-report-file","dir":"Articles","previous_headings":"Requirements","what":"Spectronaut output report file","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"Spectronaut output report contain following columns work SpectroPipeR: Spectronaut_export_scheme() function can utilized generate Spectronaut report template (*.rs). template imported Spectronaut. Subsequently, analysis mass spectrometry raw data conducted documented using template within Spectronaut.","code":"Spectronaut_export_scheme(output_location = \"../SpectroPipeR_test_folder\")"},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"parameters","dir":"Articles","previous_headings":"","what":"parameters","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"global SpectroPipeR analysis paramaters list element containing basic analysis project information SpectroPipeR needs process data. Attention: Q-value 0.01 applied Spectronaut Q-value 0.001 established within SpectroPipeR, impact ID counting. However, change affect quantification. Spectronaut report used quantification filtering selected.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"filter_oxidized_peptides-parameter","dir":"Articles","previous_headings":"parameters","what":"filter_oxidized_peptides parameter","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"SpectroPipeR, users can optionally set filter_oxidized_peptides parameter TRUE remove peptides containing oxidized methionines retaining unmodified counterparts. filtering recommended experiments using HYE species mixtures demonstrated methionine-oxidized peptides exhibit significantly lower intensity suffer markedly reduced relative quantitative precision compared unmodified forms. Additionally, variation replicate measurements also substantially higher oxidized peptides. Consequently, removing methionine-oxidized peptides quantification statistical analysis recommended approach SpectroPipeR ensure optimal results.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"hye-species-mix-experiements","dir":"Articles","previous_headings":"parameters > filter_oxidized_peptides parameter","what":"HYE species mix experiements","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"HYE species mix experiments carried 4 replicates described multicenter study benchmarks software tools label-free proteome quantification. data can accessed via MassIVE (MSV000092489) - https://massive.ucsd.edu/ProteoSAFe/dataset.jsp?task=0f33717d84fd45b1a318ad40670022cc. Spectronaut version 18.6 used data analysis. Following filtering, ion data included peptides containing methionine oxidation without prior carbamidomethylation, along unmodified counterparts. determine quantitative ratios, mix ion intensities divided corresponding ion intensities mix B.","code":""},{"path":[]},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"spectropiper---output-folder-structure","dir":"Articles","previous_headings":"","what":"SpectroPipeR - output folder structure","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"specified output folder essential. exist created. Inside SpectroPipeR specific folder structure generated.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"spectropiper---read-spectronaut-data-module","dir":"Articles","previous_headings":"","what":"SpectroPipeR - read Spectronaut data module","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"read_spectronaut_module() function serves ingest process data Spectronaut software platform. function performs following key tasks: data loading: - Reads raw data Spectronaut report - Prepares data use within SpectroPipeR analysis environment ID analysis: - Provides feedback key qualitative characteristics analysis - Includes metrics : - Identification (ID) rates - /analysis results - relevant qualitative insights","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"read_spectronaut_module-workflow","dir":"Articles","previous_headings":"SpectroPipeR - read Spectronaut data module","what":"read_spectronaut_module() workflow","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"check parameters genrate output folders init log file load spectronaut report data check columns write input data 01_input_data folder specified output folder perform raw file name capping better visibility inside plots reformat Q-value (EG.Qvalue = mixed column (character numeric)) (optional) ID condition filtering; keep data downstream analysis passes condition-wise percentage filtering generate export intermediate SDRF file export short summary ID rates log file performing counting min. sample percentage ion detected user feedback log count ID rates (ions, peptides, protein groups) filtering specified Q-value parameters list get ID rates 1 least 2 peptide hits determine ion ID median estimate ID outliers basis depending parameters list value generate ID tables ID plots /analysis conducted filtering data include proteins minimum 2 peptide hits present least 50% sample replicates, proteins meeting criteria classified “” failing designated “”. generate /analysis tables, plots UpSet analysis extract missed cleavages rates globally run level","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"sdrf-file","dir":"Articles","previous_headings":"SpectroPipeR - read Spectronaut data module > read_spectronaut_module() workflow","what":"SDRF file","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"“Public proteomics data often lack essential metadata, limiting potential. address , present lesSDRF, tool simplify process metadata annotation, thereby ensuring data leave lasting, impactful legacy well beyond initial publication.” Claeys, T. et al., 2023, Nat. Commun. 14, 6743 SpectroPipeR generates intermediate SDRF tsv file, please use https://lessdrf.streamlit.app finalizing file submitting public repository. “source name” generated using R.Condition R.Replicate column. Please carefully check column names edit refine according https://github.com/bigbio/proteomics-sample-metadata/tree/master/sdrf-proteomics. information please read lesSDRF : maximizing value proteomics data streamlined metadata annotation","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"onoff-analysis-details","dir":"Articles","previous_headings":"SpectroPipeR - read Spectronaut data module > read_spectronaut_module() workflow","what":"ON/OFF analysis details","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"determine number replicates per condition filtering ions used Q-value cutoff specified parameters filter ProteinGroups 2 peptides count ProteinGroups per condition calculate many replicates ProteinGroups identified 2 peptides Q-value cutoff specified one parameters filter list ProteinGroups found least 50% replicates per condition generate wide output","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"example-code","dir":"Articles","previous_headings":"SpectroPipeR - read Spectronaut data module","what":"example code","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"","code":"# load SpectroPipeR library(SpectroPipeR) # example input file, bundled with SpectroPipeR package example_file_path <- system.file(\"extdata\", \"SN_test_HYE_mix_file.tsv\", package=\"SpectroPipeR\") # use default parameters list params <- list(output_folder = \"../SpectroPipeR_test_folder\") # step 1: load Spectronaut data module SpectroPipeR_data <- read_spectronaut_module(file = example_file_path,                                       parameter = params,                                       print.plot = FALSE) # checking parameters ... # #***************************************** # # READ SPECTRONAUT MODULE # #***************************************** #  # loading data ... # write input data to output folder ...                                           # R.FileName capping ...                                                                                     # 02_ID_rate/8_sample_analysis ATTENTION !!! ---> folder already exists - files will be replaced !!! # _________ data set loaded with ... _________ # number of raw files = 8 # number of conditions = 2 # number of ions without filtering = 16654 # number of peptides without filtering = 12761 # number of Protein groups without filtering = 1503 # count profiled values ... # performing counting of min. sample percentage where an ion was detected... # ion Q-value cutoff < 0.01 # 12.5 % (1/8) is the min. sample percentage where an ion was detected # performing ID rate filtering ... # performing protein count over replicates (more than or equal 2 peptides) ... # performing protein count (<2 and more than or equal 2 peptides) ... # _________ ON/OFF analysis: _________                                                                 # ... filter with Q-value 0.01 ... # ... filter for 2 peptides and min. present in 50% of replicates ... # ... ON/OFF analysis write outputs ... # _________ ID rate per sample: _________                                                                  # ions: median = 16205; min. = 15575; max. = 16541 # modified peptides: median = 12850; min. = 12409; max. = 13072 # stripped peptides: median = 12468.5; min. = 12042; max. = 12682 # protein groups: median = 1485.5; min. = 1470; max. = 1499"},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"read_spectronaut_module-outputs","dir":"Articles","previous_headings":"SpectroPipeR - read Spectronaut data module","what":"read_spectronaut_module() outputs","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"output specified output folder read_spectronaut_module() function look like example:","code":""},{"path":[]},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"id_counts_plot","dir":"Articles","previous_headings":"SpectroPipeR - read Spectronaut data module > read_spectronaut_module() outputs > figures","what":"ID_counts_plot","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"bar chart labeled ID_counts_plot illustrates number identifications (IDs) discovered ion, peptide, protein group levels, corresponding user specified Q-value. advisable select Q-value defined Spectronaut.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"id_counts_plot_ion_filter","dir":"Articles","previous_headings":"SpectroPipeR - read Spectronaut data module > read_spectronaut_module() outputs > figures","what":"ID_counts_plot_ion_filter","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"bar chart labeled ID_counts_plot_ion_filter depicts ions counts corresponding user specified Q-value. dotted line graph represents median count ions, solid line indicates threshold criteria defining outlier run. ‘id_drop_cutoff’ parameter set 0.3, implies cutoff criteria identifying potential ID outliers determined formula median ion count * (1-0.3). run ion count line highlighted orange labeled ID outlier.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"id_ion_counts_plot","dir":"Articles","previous_headings":"SpectroPipeR - read Spectronaut data module > read_spectronaut_module() outputs > figures","what":"ID_ion_counts_plot","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"bar chart, titled ID_ion_counts_plot, presents ion identifications (IDs) stacked barchart format. differentiates ions discovered specified Q-value threshold (depicted blue), found threshold (shown grey), profiled ions (represented red).","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"missed_cleavages_sample_wise","dir":"Articles","previous_headings":"SpectroPipeR - read Spectronaut data module > read_spectronaut_module() outputs > figures","what":"missed_cleavages_sample_wise","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"bar chart, titled ID_ion_counts_plot, depicts number missed cleavages per run. text bar indicates missed cleavage percentage.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"missed_cleavages_sample_wise_percentage","dir":"Articles","previous_headings":"SpectroPipeR - read Spectronaut data module > read_spectronaut_module() outputs > figures","what":"missed_cleavages_sample_wise_PERCENTAGE","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"bar chart, titled missed_cleavages_sample_wise_PERCENTAGE, shows number peptides x-missed cleavages (y-axis left side) percentage (y-axis right side) per run.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"missed_cleavages_global","dir":"Articles","previous_headings":"SpectroPipeR - read Spectronaut data module > read_spectronaut_module() outputs > figures","what":"missed_cleavages_global","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"bar chart, titled missed_cleavages_global, depicts missed cleavage rate whole project.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"detected_proteingroups__upsetr__plot","dir":"Articles","previous_headings":"SpectroPipeR - read Spectronaut data module > read_spectronaut_module() outputs > figures","what":"Detected_ProteinGroups__UpSetR__plot","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"UpSet plot (**Detected_ProteinGroups__UpSetR__plot**) illustrates outcome /analysis. /analysis conducted filtering data include proteins minimum 2 peptide hits present least 50% sample replicates, proteins meeting criteria classified “” failing designated “”. want know principle UpSet plot visit https://en.wikipedia.org/wiki/UpSet_plot","code":""},{"path":[]},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"file_list-csv","dir":"Articles","previous_headings":"SpectroPipeR - read Spectronaut data module > read_spectronaut_module() outputs > tables","what":"file_list.csv","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"file_list.csv table contains 4 columns gives brief overview files used project R.FileName capped raw file name R.FileName_raw un-capped version raw file name R.Condition condition naming setup Spectronaut analysis R.Replicate replicate number setup Spectronaut analysis","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"id_counts-csv","dir":"Articles","previous_headings":"SpectroPipeR - read Spectronaut data module > read_spectronaut_module() outputs > tables","what":"ID_counts.csv","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"ID_counts.csv table summarizes ID counts. R.FileName capped raw file name R.Condition condition naming setup Spectronaut analysis R.Replicate replicate number setup Spectronaut analysis distinct_ions number distinct ions identified user specified Q-value distinct_modified_peptides number distinct peptide sequences incl. modification identified user specified Q-value distinct_peptides number distinct stripped peptide sequences identified user specified Q-value distinct_proteins number distinct protein groups identified user specified Q-value ion_ID_outlier yes / indication run marked ID outlier","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"ion_id_counts_fractions-csv","dir":"Articles","previous_headings":"SpectroPipeR - read Spectronaut data module > read_spectronaut_module() outputs > tables","what":"ion_ID_counts_fractions.csv","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"ion_ID_counts_fractions.csv table summarizes ID counts user specified Q-value count profiled ions. R.FileName capped raw file name R.Condition condition naming setup Spectronaut analysis R.Replicate replicate number setup Spectronaut analysis <0.01 count ions Q-value 0.01 >0.01 count ions Q-value 0.01 profiled count ions profiled","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"missed_cleavages_sample_wise_percentage-csv","dir":"Articles","previous_headings":"SpectroPipeR - read Spectronaut data module > read_spectronaut_module() outputs > tables","what":"missed_cleavages_sample_wise_PERCENTAGE.csv","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"missed_cleavages_sample_wise_PERCENTAGE.csv table summarizes missed cleavages counts per run. R.FileName capped raw file name MC_0 number peptides 0 missed cleavages MC_1 number peptides 1 missed cleavages MC_2 number peptides 2 missed cleavages total_peptide_count total number peptides per run MC_peptide_count peptide count missed cleavage peptides MC_percentage percentage missed cleavages per run","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"protein_count__strippedpep_without_qvalue_cut-csv","dir":"Articles","previous_headings":"SpectroPipeR - read Spectronaut data module > read_spectronaut_module() outputs > tables","what":"protein_count__strippedPEP_without_Qvalue_cut.csv","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"protein_count__strippedPEP_without_Qvalue_cut.csv table summarizes protein group count without additional Q-value filtering least 2 peptides 2 peptides. R.FileName capped raw file name R.Condition condition naming setup Spectronaut analysis R.Replicate replicate number setup Spectronaut analysis protein_count protein group count number_of_peptides indicates fraction 2 peptides per protein group (<2) fraction protein groups least 2 peptides (>=2)","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"protein_count__strippedpep-csv","dir":"Articles","previous_headings":"SpectroPipeR - read Spectronaut data module > read_spectronaut_module() outputs > tables","what":"protein_count__strippedPEP.csv","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"protein_count__strippedPEP_without_Qvalue_cut.csv table summarizes protein group count Q-value filtering (e.g. <0.01) least 2 peptides 2 peptides. R.FileName capped raw file name R.Condition condition naming setup Spectronaut analysis R.Replicate replicate number setup Spectronaut analysis protein_count protein group count number_of_peptides indicates fraction 2 peptides per protein group (<2) fraction protein groups least 2 peptides (>=2) Qvalue_below user specififed Q-value threshold","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"detected_proteingroups__stripped_peptide_count_per_condition_raw_data-csv","dir":"Articles","previous_headings":"SpectroPipeR - read Spectronaut data module > read_spectronaut_module() outputs > tables","what":"Detected_ProteinGroups__stripped_peptide_count_per_condition_raw_data.csv","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"Detected_ProteinGroups__stripped_peptide_count_per_condition_raw_data.csv table summarizes protein group count replicates. table protein_count_over_replicates_min_2_pep_Qvalue_cutoff_0.01.csv table without peptide_count column. table Detected_ProteinGroups__UpSetR__plot__stripped_peptide_count_per_condition.csv summarize data wide-tabular format containing information peptide count per condition R.Condition condition naming setup Spectronaut analysis R.FileName capped raw file name peptide_count number stripped peptide sequencing filtering user specified Q-value present_replicate_count count many replicate protein group found present replicate_total_count total replicate count condition present_replicate_percentage percentage many replicate protein group found present","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a01_SpectroPipeR_read_Spectronaut_data.html","id":"detected_proteingroups__stripped_peptide_count_per_condition_raw_data-xlsx","dir":"Articles","previous_headings":"SpectroPipeR - read Spectronaut data module > read_spectronaut_module() outputs > tables","what":"Detected_ProteinGroups__stripped_peptide_count_per_condition_raw_data.xlsx","title":"SpectroPipeR - step 1 - read Spectronaut data","text":"table Detected_ProteinGroups__stripped_peptide_count_per_condition_raw_data.xlsx holds binary information /analysis results. PG.ProteinGroups  protein group ID column conditions… columns highlighting binary format (1 = present / 0 = present) protein group found present user specific criteria . table protein_count_over_replicates_min_2_pep_percentage_WIDE_Qvalue_cutoff_0.01.csv summarize data way can find percentage replicates wide-tabular format. table Detected_ProteinGroups__UpSetR__plot__binary_coded.csv contains binary information /analysis UpSet plot.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"spectropiper---normalization-and-quantification-module","dir":"Articles","previous_headings":"","what":"SpectroPipeR - normalization and quantification module","title":"SpectroPipeR - step 2 - normalization and quantification","text":"norm_quant_module() function serves process data read_spectronaut_module(); utilizes read_spectronaut_module output: data normalization: - normalize ion data using median-median lagorithm aout-detect data already normalized Spectronaut using e.g. local cross-run normalization (optional) batch adjusting: - provides batch adjusting functionality needed using ComBat methodology described Johnson et al. 2007 (optional) covariate adjusting: - provides covariate adjusting functionality needed using lm() function user specified meta data formula calculate residuals per peptides back-transformed intensities adding mean peptide intensity. protein quantification: - protein quantification can either done Hi3 (project-wide determination Hi3 peptides) MaxLFQ approach (iq package) EG.TotalQuantity (Settings) column used quantification. Per default MS2 level selected quantification setting Spectronaut™.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"norm_quant_module-workflow","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module","what":"norm_quant_module() workflow","title":"SpectroPipeR - step 2 - normalization and quantification","text":"load read_spectronaut_module() output (optional) check batch covariate adjustment inputs auto-detect normalization done inside Spectrout, yes use normalization use median-median normalization calculate/ectract normalization factors generate plots normalization factors/raw/normalized ion intensities calculate ion coefficient variation (CV) globally per missed cleavage calculate peptide intensities summing ion intensities per peptide sequence replacing 0 peptide intensity values half-minimal peptide intensity value (optional) filter methionine-oxidized peptides (optional) perform batch adjusting using ComBat; PCA data adjusting (optional) perform covariate adjusting data; PCA data adjusting calculate protein intensity peptide intensities (Hi3 MaxLFQ) extract iBAQ intensities (optional - covariate adjustment) calculate protein intensity CV compare protein int. (Hi3 MaxLFQ) vs. iBAQ calc. cumulative frequency CV generate sample condition file including measurement order generate plots & table outputs","code":""},{"path":[]},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"coefficient-of-variation-cv","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() workflow > background informations","what":"coefficient of variation (CV)","title":"SpectroPipeR - step 2 - normalization and quantification","text":"coefficient variation (CV) = standard deviation / mean coefficient variation (CV) measure variability dataset, commonly used proteomics assess reproducibility protein abundance measurements. given context, CV observed higher low abundant range protein intensity lower mid higher abundant range. Several factors can influence CV, including: sample preparation, sample type, Mass Spectrometry (MS) methodology","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"hi3-protein-intensity","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() workflow > background informations","what":"Hi3 protein intensity","title":"SpectroPipeR - step 2 - normalization and quantification","text":"Hi3 uses mean highest 2-3 peptides per protein defined median whole dataset.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"ibaq-protein-intensity","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() workflow > background informations","what":"iBAQ protein intensity","title":"SpectroPipeR - step 2 - normalization and quantification","text":"iBAQ (intensity-Based Absolute Quantification) method used proteomics estimate relative abundance proteins within sample. iBAQ value protein calculated dividing total intensity (sum peptide intensities) protein number theoretically observable tryptic peptides protein. normalizes protein intensity number peptides can detected. Schwanhäusser *et al., 2011","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"maxlfq-protein-intensity","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() workflow > background informations","what":"MaxLFQ protein intensity","title":"SpectroPipeR - step 2 - normalization and quantification","text":"MaxLFQ stands Maximal Peptide Ratio Extraction Label-Free Quantification. algorithm used estimate protein abundances mass spectrometry-based proteomics aiming maintain fragment intensity ratios samples. MaxLFQ algorithm calculates protein intensities taking maximum peptide ratio peptides map protein normalizing across samples. MaxLFQ algorithm developed Cox et al. 2014 widely used label-free quantitative proteomics. considered accurate method proteome-wide label-free quantification. technical terms, MaxLFQ algorithm calculates ratio two samples using peptide species present. pair-wise protein ratio defined median peptide ratios, protect outliers (require minimal number two peptide ratios order given protein ratio considered valid).point algorithm constructed triangular matrix containing pair-wise protein ratios two samples, maximal possible quantification information. algorithm perform least-squares analysis reconstruct abundance profile optimally satisfying individual protein ratios matrix based sum squared differences. alg. rescales whole profile cumulative intensity across samples, thereby preserving total summed intensity protein samples. procedure repeated proteins, resulting accurate abundance profile protein across samples.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"batch-adjustment-of-data-using-combat","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() workflow > background informations","what":"Batch adjustment of data using ComBat","title":"SpectroPipeR - step 2 - normalization and quantification","text":"Batch effects refer systematic differences batches (groups) samples high-throughput experiments. differences can arise due various factors, batch variations sample preparation, handling, processing procedures measurement orders. Batch effects can obscure true biological signal lead incorrect conclusions properly accounted . SpectroPipeR pipeline, ComBat tool employed adjust batch effects datasets batch covariate known. ComBat utilizes methodology described Johnson et al. 2007. uses empirical Bayes (EB) framework adjusting data batch effects robust outliers small sample sizes performs comparable existing methods large samples. Johnson et al. 2007: method incorporates systematic batch biases common across genes making adjustments, assuming phenomena resulting batch effects often affect many genes similar ways (.e. increased expression, higher variability, etc). Specifically, L/S model parameters estimated represent batch effects pooling information across genes batch shrink batch effect parameter estimates toward overall mean batch effect estimates (across peptides). EB estimates used adjust data batch effects, providing robust adjustments batch effect peptide. SpectroPipeR parametric ComBAT emperical Bayes adjustment implemented utilizing sva-package. adjusting data may find PCA analysis plot (Dim. 1-5) adjusted un-adjusted data 05_processed_data. Following adjustment peptide data, protein intensities computed.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"covariate-adjustment","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() workflow > background informations","what":"Covariate adjustment","title":"SpectroPipeR - step 2 - normalization and quantification","text":"SpectroPipeR capable performing covariate adjustment quantitative data. adjustment achieved utilizing user-provided meta data formula. adjustment process employs linear model function, lm(), operates log10 transformed peptide intensity data. linear model fitted, residuals computed. residuals adjusted back original quantitative range adding mean peptide intensity across samples. ensures peptide’s quantitative range preserved. Following adjustment peptide data, protein intensities computed. Given iBAQ intensities derived Spectronaut report, undergo similar adjustment process applied peptides.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"example-code","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module","what":"example code","title":"SpectroPipeR - step 2 - normalization and quantification","text":"norm_quant_module() needs output read_spectronaut_module() !","code":"# step 2: normalize & quantification module SpectroPipeR_data_quant <- norm_quant_module(SpectroPipeR_data = SpectroPipeR_data) # #***************************************** # # NORMALIZATION & QUANTIFICATION MODULE # #***************************************** #  # sorting Replicates and conditions ... # NORMALIZATION WAS DONE IN SPECTRONAUT... # ...skipping normalization step and use Spectronaut normalized data instead... # save Normalization factor plot ...                                                                         # save Normalization boxplot ... # count missed cleavages ... # save missed cleavage plots...                                                                              # generate ion CV data... # save ion CV data plots... # save ion CV data vs. mean intensity hexbin plots... # calculating peptide intensity data ... # writing peptide intensity data ... # protein intensity calculation ...                                                                          # extracting iBAQ intensities from Spectronaut report ... # calc. mean, SD, CV of iBAQ intensities ... # ... save iBAQ data ... # perform maxLFQ protein intensity calculation ... (this will take some time)                                # ... preprocessing data for MaxLFQ estimation ... # Concatenating secondary ids... #  # Removing low intensities... #  # ... generate protein list for MaxLFQ estimation ... # # proteins = 1503, # samples = 8 # 5.1% # 10% # 15% # 20% # 25% # 30% # 35% # 40% # 46% # 51% # 56% # 61% # 66% # 71% # 76% # 81% # 86% # 91% # 96% # Completed. # ... calculation of MaxLFQ ... # 5.1% # 10% # 15% # 20% # 25% # 30% # 35% # 40% # 46% # 51% # 56% # 61% # 66% # 71% # 76% # 81% # 86% # 91% # 96% # Completed. # ... generate outputs for MaxLFQ estimation ... # ... do median normalization of maxLFQ data ... # ... save MaxLFQ boxplot ... # ... save MaxLFQ data ... # ... compare protein intensities and iBAQ protein intensities ...                                            # ... CV plot calculation ... # ... render CV plot ... # _________ normalization done _________ # no outlier detected with 4 fold difference from the median"},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"norm_quant_module-outputs","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module","what":"norm_quant_module() outputs","title":"SpectroPipeR - step 2 - normalization and quantification","text":"output specified output folder norm_quant_module() function look like example (03_normalization, 05_processed_data):","code":""},{"path":[]},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"normalization_factor_plot","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() outputs > normalization - figures","what":"normalization_factor_plot","title":"SpectroPipeR - step 2 - normalization and quantification","text":"bar chart, denoted normalization_factor_plot, depicts normalization factor employed data normalization. event local cross-run normalization chosen Spectronaut, median normalization factors exhibited. user-defined cut-threshold SpectroPipeR parameters setting represented solid lines. run normalization factor exceeding threshold, highlighted orange plot indicated normalization tables.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"normalization_factor_boxplot","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() outputs > normalization - figures","what":"normalization_factor_BOXplot","title":"SpectroPipeR - step 2 - normalization and quantification","text":"boxplot/density chart, denoted normalization_factor_BOXplot, depicts normalization factor employed data normalization e.g. local cross-run normalization chosen Spectronaut.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"normalization_boxplot","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() outputs > normalization - figures","what":"normalization_boxplot","title":"SpectroPipeR - step 2 - normalization and quantification","text":"boxplot/density chart, denoted normalization_boxplot, depicts raw normalized ion intensities.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"ion_cv_plot","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() outputs > normalization - figures","what":"ion_CV_plot","title":"SpectroPipeR - step 2 - normalization and quantification","text":"ion_CV_plot illustrates ion coefficient variation (CV) globally assigned missed cleavages.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"ion_intenisty_vs_cv_hexbin_plot","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() outputs > normalization - figures","what":"ion_intenisty_vs_CV_hexbin_plot","title":"SpectroPipeR - step 2 - normalization and quantification","text":"ion_intenisty_vs_CV_hexbin_plot depicts ion coefficient variation (CV) regard normalized ion intensity.","code":""},{"path":[]},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"median_normalization_factors-csv","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() outputs > normalization - tables","what":"Median_normalization_factors.csv","title":"SpectroPipeR - step 2 - normalization and quantification","text":"file_list.csv table contains 4 columns gives brief overview files used project R.FileName capped raw file name R.Condition condition naming setup Spectronaut analysis R.Replicate replicate number setup Spectronaut analysis MedianNormalizationFactor normalization factor case local cross run normalization median normalization factors normalization_outlier indicator column outlier based normalization factor threshold user specified SpectroPipeR parameters","code":""},{"path":[]},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"maxlfq_protein_intensity_boxplot","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() outputs > processed data - figures","what":"MaxLFQ_protein_intensity_boxplot","title":"SpectroPipeR - step 2 - normalization and quantification","text":"MaxLFQ_protein_intensity_boxplot illustrates raw normalized MaxLFQ protein intensities.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"cv_vs_intensity_plot","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() outputs > processed data - figures","what":"CV_vs_intensity_plot","title":"SpectroPipeR - step 2 - normalization and quantification","text":"CV_vs_intensity_plot depicts normalized protein intensity vs coefficient variation (CV) protein intensity. horizontal solid line figure indicates CV 0.1, dotted line represents CV 0.2. lines serve reference points evaluate variability protein abundance measurements. pink labels figure show percentage proteins CV 0.1 0.2, respectively, relation total number protein identifications. information provides insights overall reproducibility protein abundance measurements within dataset.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"protein_intensities_vs_ibaq_intensities","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() outputs > processed data - figures","what":"protein_intensities_vs_iBAQ_intensities","title":"SpectroPipeR - step 2 - normalization and quantification","text":"protein_intensities_vs_iBAQ_intensities plot depicts ratios different protein intensity estimation algorithms, MaxLFQ iBAQ. allows user assess relationship potential differences estimation methods. upper panel plot displays ratios protein intensity estimates, providing visual representation similarities discrepancies different algorithms. lower panel plot includes bar chart shows count frequency individual protein intensity estimations.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"cv_cumulative_frequency_plot","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() outputs > processed data - figures","what":"CV_cumulative_frequency_plot","title":"SpectroPipeR - step 2 - normalization and quantification","text":"CV_cumulative_frequency_plot graphically represents cumulative frequency Coefficient Variation (CV) peptide protein levels. x-axis, coefficient variation (CV) plotted, y-axis displays cumulative frequency. lines differentiated color according condition. enables user assess evaluate reproducibility measurements across different conditions analysis.","code":""},{"path":[]},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"sample_to_condition_file-csv","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() outputs > processed data - tables","what":"sample_to_condition_file.csv","title":"SpectroPipeR - step 2 - normalization and quantification","text":"sample_to_condition_file.csv table contains information run file name, condtion, replicate, run date resulting measurement order. R.Condition condition naming setup Spectronaut analysis R.FileName capped raw file name R.Replicate replicate number setup Spectronaut analysis R.Run Date raw file run date measurement_order measurement order (integer)","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"peptide_intensities-csv","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() outputs > processed data - tables","what":"peptide_intensities.csv","title":"SpectroPipeR - step 2 - normalization and quantification","text":"peptide_intensities.csv table contains information calculated peptide intensities. Specifically, table holds sum normalized ion data peptide-sample combination. R.FileName capped raw file name R.Replicate replicate number setup Spectronaut analysis R.Condition condition naming setup Spectronaut analysis PG.ProteinGroups protein group IDs EG.ModifiedPeptide modified peptide sequences PEP.StrippedSequence stripped peptide sequences peptide_intensity peptide intensity","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"peptide_intensities_final-csv","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() outputs > processed data - tables","what":"peptide_intensities_final.csv","title":"SpectroPipeR - step 2 - normalization and quantification","text":"peptide_intensities_final.csv table contains information calculated peptide intensities finalized e.g. removing methionine oxidized peptides. R.FileName capped raw file name R.Replicate replicate number setup Spectronaut analysis R.Condition condition naming setup Spectronaut analysis PG.ProteinGroups protein group IDs EG.ModifiedPeptide modified peptide sequences PEP.StrippedSequence stripped peptide sequences peptide_intensity peptide intensity","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"ibaq_protein_intensity_data_extracted_from_spectronaut-csv","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() outputs > processed data - tables","what":"iBAQ_protein_intensity_data_extracted_from_Spectronaut.csv","title":"SpectroPipeR - step 2 - normalization and quantification","text":"iBAQ_protein_intensity_data_extracted_from_Spectronaut.csv table contains information calculated peptide intensities finalized e.g. removing methionine oxidized peptides. R.FileName capped raw file name R.Condition condition naming setup Spectronaut analysis R.Replicate replicate number setup Spectronaut analysis PG.ProteinGroups protein group IDs iBAQ_intensities SpectroPipeR extracted iBAQ intensities PG.IBAQ_raw Spectronaut iBAQ calculations Since protein group can contain one protein number theoretical peptides may differ. Therefore Spectronaut separates “;” e.g. “6179.5;6376.5”. SpectroPipeR uses mean iBAQ values give iBAQ estimate protein group well.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"ibaq_protein_intensity_data_extracted_from_spectronaut_summary-csv","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() outputs > processed data - tables","what":"iBAQ_protein_intensity_data_extracted_from_Spectronaut_summary.csv","title":"SpectroPipeR - step 2 - normalization and quantification","text":"iBAQ_protein_intensity_data_extracted_from_Spectronaut_summary.csv table contains information calculated peptide intensities finalized e.g. removing methionine oxidized peptides. R.Condition condition naming setup Spectronaut analysis PG.ProteinGroups protein group IDs mean_iBAQ_intensities mean iBAQ intensities replicates SD_iBAQ_intensities standard deviation iBAQ intensities replicates CV_iBAQ_intensities coefficient variation iBAQ intensities replicates iBAQ_quantiles project specific iBAQ quantile calculated using analysis specific mean iBAQ intensities runs","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"maxlfq_protein_intensity_data-csv","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() outputs > processed data - tables","what":"maxLFQ_protein_intensity_data.csv","title":"SpectroPipeR - step 2 - normalization and quantification","text":"maxLFQ_protein_intensity_data.csv table contains information calculated MaxLFQ protein intensity data calculated iq package algorithm. PG.ProteinGroups protein group IDs R.FileName capped raw file name protein_intensity MaxLFQ intensity R.Condition condition naming setup Spectronaut analysis R.Replicate replicate number setup Spectronaut analysis intensity_rank MaxLFQ protein intensity rank","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"maxlfq_protein_intensity_data_wideformat-csv","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() outputs > processed data - tables","what":"maxLFQ_protein_intensity_data_wideFormat.csv","title":"SpectroPipeR - step 2 - normalization and quantification","text":"maxLFQ_protein_intensity_data_wideFormat.csv wide-tablular table contains information calculated MaxLFQ protein intensity data calculated iq package algorithm. PG.ProteinGroups protein group IDs columns column names = capped R.FileName; values = MaxLFQ intensity","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"maxlfq_protein_intensity_rank_data_wideformat-csv","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() outputs > processed data - tables","what":"maxLFQ_protein_intensity_rank_data_wideFormat.csv","title":"SpectroPipeR - step 2 - normalization and quantification","text":"maxLFQ_protein_intensity_data_wideFormat.csv wide-tablular table contains information calculated MaxLFQ protein intensity ranks. PG.ProteinGroups protein group IDs columns column names = capped R.FileName; values = MaxLFQ intensity ranks","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"maxlfq_protein_intensity_data_normalization_factor-csv","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() outputs > processed data - tables","what":"maxLFQ_protein_intensity_data_normalization_factor.csv","title":"SpectroPipeR - step 2 - normalization and quantification","text":"maxLFQ_protein_intensity_data_normalization_factor.csv table contains median-median normalization factors MaxLFQ protein intensity data R.FileName  protein group IDs maxLFQ_post_calculation_normalization_factor MaxLFQ median-median normalization factor","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"cv_20percent_cumulative_frequency-csv","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() outputs > processed data - tables","what":"CV_20percent_cumulative_frequency.csv","title":"SpectroPipeR - step 2 - normalization and quantification","text":"CV_20percent_cumulative_frequency.csv table contains cumulative frequency CV≤0.2 fraction peptide protein intensity level R.Condtion  conditions provided Spectronaut report cumulative frequency cumulative frequency CV_cut CV threshold cumulative frequency calculated level peptide protein level cumulative frequency proportion cumulative frequency proportion overall peptide protein numbers per condition","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a02_SpectroPipeR_norm_quant.html","id":"cv_cumulative_frequency-csv","dir":"Articles","previous_headings":"SpectroPipeR - normalization and quantification module > norm_quant_module() outputs > processed data - tables","what":"CV_cumulative_frequency.csv","title":"SpectroPipeR - step 2 - normalization and quantification","text":"comprehensive CV_cumulative_frequency.csv table contains cumulative frequency peptide protein intensity level R.Condtion  conditions provided Spectronaut report cumulative frequency cumulative frequency CV_cut CV threshold cumulative frequency calculated level peptide protein level cumulative frequency proportion cumulative frequency proportion overall peptide protein numbers per condition","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a03_SpectroPipeR_MVA_analysis.html","id":"spectropiper-mva-analysis","dir":"Articles","previous_headings":"","what":"SpectroPipeR MVA analysis","title":"SpectroPipeR - step 3 -  MVA analysis","text":"Multivariate analysis (MVA) particularly useful analyzing complex datasets, provides deeper, nuanced understanding relationships samples.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a03_SpectroPipeR_MVA_analysis.html","id":"background-information","dir":"Articles","previous_headings":"SpectroPipeR MVA analysis","what":"background information","title":"SpectroPipeR - step 3 -  MVA analysis","text":"PCA analysis performed normalized log2 peptide (peptide intensity) log2 protein (MaxLFQ Hi3 intensity) level using data. principle component analysis peptide protein level done using factomineR package, data scaled unit variance.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a03_SpectroPipeR_MVA_analysis.html","id":"pca","dir":"Articles","previous_headings":"SpectroPipeR MVA analysis > background information","what":"PCA","title":"SpectroPipeR - step 3 -  MVA analysis","text":"PCA stands Principal Component Analysis, statistical technique used reduce dimensionality large data sets. transforming large set variables smaller one still contains information large set. achieved finding new variables, called principal components, linear combinations original variables capture much variation data possible. first principal component captures largest amount variation data, subsequent component captures next largest amount variation. PCA plot visual representation results Principal Component Analysis (PCA). can help understand relationships samples data showing cluster together based similarity. Samples close together plot similar , samples far apart dissimilar. direction length arrows plot show variable contributes first second principal components. first second dimensions PCA plot represent first second principal components data, respectively. two directions data capture variation. first principal component captures largest amount variation data, second principal component captures second largest amount variation.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a03_SpectroPipeR_MVA_analysis.html","id":"hcpc","dir":"Articles","previous_headings":"SpectroPipeR MVA analysis > background information > PCA","what":"HCPC","title":"SpectroPipeR - step 3 -  MVA analysis","text":"HCPC selected Hierarchical Clustering Principle Components performed using metric “euclidean” method “complete”. clustering tree automatically cut suggested level (loss inertia).","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a03_SpectroPipeR_MVA_analysis.html","id":"umap","dir":"Articles","previous_headings":"SpectroPipeR MVA analysis > background information","what":"UMAP","title":"SpectroPipeR - step 3 -  MVA analysis","text":"UMAP stands Uniform Manifold Approximation Projection. dimension reduction technique can used visualization similarly t-SNE, also general non-linear dimension reduction. UMAP powerful tool machine learning practitioners visualize understand large, high dimensional datasets. offers number advantages t-SNE, notably increased speed better preservation data’s global structure. perform UMAP analysis, first step construct high-dimensional graph representation data. done finding k-nearest neighbors data point connecting edges. weight edge determined distance two points connects. Next, low-dimensional graph optimized structurally similar possible high-dimensional graph. done using stochastic gradient descent algorithm minimizes cross-entropy two graphs. result UMAP analysis low-dimensional representation data can visualized using scatter plot. point plot represents sample, position reflects values first two three principal components. Samples close together plot similar , samples far apart dissimilar. summary, UMAP analysis performed constructing high-dimensional graph representation data, optimizing low-dimensional graph structurally similar possible. result low-dimensional representation data can visualized used understand patterns relationships data. MVA_module() function generate: PCA analysis (optional) HCPC (hierarchical clustering principle components) analysis, information see factomineR correlation analysis UMAP analysis","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a03_SpectroPipeR_MVA_analysis.html","id":"example-code","dir":"Articles","previous_headings":"SpectroPipeR MVA analysis","what":"example code","title":"SpectroPipeR - step 3 -  MVA analysis","text":"MVA_module() needs output norm_quant_module() !","code":"# step 3: MVA module MVA_module(SpectroPipeR_data_quant = SpectroPipeR_data_quant)"},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a03_SpectroPipeR_MVA_analysis.html","id":"mva_module-outputs","dir":"Articles","previous_headings":"SpectroPipeR MVA analysis","what":"MVA_module() outputs","title":"SpectroPipeR - step 3 -  MVA analysis","text":"output specified output folder MVA_module() function look like example (04_multivariate_analysis):","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a03_SpectroPipeR_MVA_analysis.html","id":"mva---rds-files","dir":"Articles","previous_headings":"SpectroPipeR MVA analysis > MVA_module() outputs","what":"MVA - RDS files","title":"SpectroPipeR - step 3 -  MVA analysis","text":".rds files file format used R save load single R objects, data frames, models, lists **PCA_analysis__peptide_level.RDS** data R object file contains PCA data peptide level **PCA_analysis__protein_level.RDS** data R object file contains PCA data protein level **UMAP_analysis__protein_level.RDS** data R object file contains UMAP data protein level","code":""},{"path":[]},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a03_SpectroPipeR_MVA_analysis.html","id":"correlation_plots","dir":"Articles","previous_headings":"SpectroPipeR MVA analysis > MVA_module() outputs > MVA - figures","what":"correlation_plots","title":"SpectroPipeR - step 3 -  MVA analysis","text":"correlation_plots depicts spearman correlation score (closer 1 = higher correaltion) peptide protein level tile plot.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a03_SpectroPipeR_MVA_analysis.html","id":"d-pca_plots","dir":"Articles","previous_headings":"SpectroPipeR MVA analysis > MVA_module() outputs > MVA - figures","what":"3D PCA_plots","title":"SpectroPipeR - step 3 -  MVA analysis","text":"3D_PCA_plot__peptide_level.html 3D_PCA_plot__protein_level.html interactive 3D representations 1st-2nd-3rd dimension PCA.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a03_SpectroPipeR_MVA_analysis.html","id":"pca_plots","dir":"Articles","previous_headings":"SpectroPipeR MVA analysis > MVA_module() outputs > MVA - figures","what":"PCA_plots","title":"SpectroPipeR - step 3 -  MVA analysis","text":"PCA_plots encompass series graphical representations, arranged top bottom. include scree plot, contribution plot, PCA plot comparing 1st 2nd dimensions, Biplot. panel divided two sections: left side illustrates peptide level, right side depicts protein level. scree plot visual tool helps determine optimal number components factors retain multivariate analysis examining pattern explained variance across different components. contribution plot depicts Top10 variable contributions determination given principal component (percentage) : (var.cos2 * 100) / (total cos2 component) PCA plot comparing 1st 2nd dimensions samples. biplot displays relationships samples proteins/peptides dataset.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a03_SpectroPipeR_MVA_analysis.html","id":"pca_plot_protein_level_conditions_marked","dir":"Articles","previous_headings":"SpectroPipeR MVA analysis > MVA_module() outputs > MVA - figures","what":"PCA_plot_protein_level_conditions_marked","title":"SpectroPipeR - step 3 -  MVA analysis","text":"PCA_plot_protein_level_conditions_marked graphically represents samples 1st 2nd PCA dimensions protein level, colors indicating respective conditions.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a03_SpectroPipeR_MVA_analysis.html","id":"pca_plot_protein_level_replicates_marked","dir":"Articles","previous_headings":"SpectroPipeR MVA analysis > MVA_module() outputs > MVA - figures","what":"PCA_plot_protein_level_replicates_marked","title":"SpectroPipeR - step 3 -  MVA analysis","text":"PCA_plot_protein_level_replicates_marked graphically represents samples 1st 2nd PCA dimensions protein level, colors indicating respective conditions text labels indicating replicates.  PCA_plot_1st_to_5th_dimension__protein_level graphically represents samples 1st 5th PCA dimensions protein level, colors indicating respective conditions.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a03_SpectroPipeR_MVA_analysis.html","id":"pca_plot_protein_level_measurement_order","dir":"Articles","previous_headings":"SpectroPipeR MVA analysis > MVA_module() outputs > MVA - figures","what":"PCA_plot_protein_level_measurement_order","title":"SpectroPipeR - step 3 -  MVA analysis","text":"PCA_plot_protein_level_conditions_marked graphically represents samples 1st 2nd PCA dimensions protein level, colors indicating measurement order.  PCA_plot_1st_to_5th_dimension__protein_level_measurement_order graphically represents samples 1st 5th PCA dimensions protein level, colors indicating measurement order.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a03_SpectroPipeR_MVA_analysis.html","id":"pca_plot_1st_to_5th_dimension__peptide_level","dir":"Articles","previous_headings":"SpectroPipeR MVA analysis > MVA_module() outputs > MVA - figures","what":"PCA_plot_1st_to_5th_dimension__peptide_level","title":"SpectroPipeR - step 3 -  MVA analysis","text":"PCA_plot_1st_to_5th_dimension__peptide_level graphically represents samples 1st 5th PCA dimensions peptide level, colors indicating respective conditions.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a03_SpectroPipeR_MVA_analysis.html","id":"pca_plot_1st_to_5th_dimension__peptide_level_measurement_order","dir":"Articles","previous_headings":"SpectroPipeR MVA analysis > MVA_module() outputs > MVA - figures","what":"PCA_plot_1st_to_5th_dimension__peptide_level_measurement_order","title":"SpectroPipeR - step 3 -  MVA analysis","text":"PCA_plot_1st_to_5th_dimension__peptide_level_measurement_order graphically represents samples 1st 5th PCA dimensions peptide level, colors indicating measurement order.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a03_SpectroPipeR_MVA_analysis.html","id":"umap_plot_protein_level_conditions_marked","dir":"Articles","previous_headings":"SpectroPipeR MVA analysis > MVA_module() outputs > MVA - figures","what":"UMAP_plot_protein_level_conditions_marked","title":"SpectroPipeR - step 3 -  MVA analysis","text":"UMAP_plot_protein_level_conditions_marked graphically represents samples UMAP dimensions protein level, colors indicating measurement order.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a03_SpectroPipeR_MVA_analysis.html","id":"hcpc---figures","dir":"Articles","previous_headings":"SpectroPipeR MVA analysis > MVA_module() outputs > MVA - figures","what":"HCPC - figures","title":"SpectroPipeR - step 3 -  MVA analysis","text":"HCPC performs agglomerative hierarchical clustering results factor analysis. SpectroPipeR performed peptide protein level.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a04_SpectroPipeR_statistics.html","id":"spectropiper-statistics","dir":"Articles","previous_headings":"","what":"SpectroPipeR statistics","title":"SpectroPipeR - step 4 - statistics","text":"statistical analysis carried utilizing PECA package recommended test “rots” test. ROPECA (reproducibility-optimized peptide change averaging) approach can inspected detail Enhanced differential expression statistics data-independent acquisition proteomics","code":""},{"path":[]},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a04_SpectroPipeR_statistics.html","id":"statistical-analysis","dir":"Articles","previous_headings":"SpectroPipeR statistics > background information","what":"statistical analysis","title":"SpectroPipeR - step 4 - statistics","text":"Pair-wise comparison can carried using ordinary t-test (“t”), modified t-test (“modt”), reproducibility-optimized test statistic (“rots”). type data aggregation can either (“median”) (“tukey”) calculating protein values. test may performed paired unpaired depending experimental design. PECA determines differential gene expression using directly peptide intensity measurements proteomic datasets. change two groups samples first calculated peptide datasets. protein-level changes defined median/tukey peptide level changes. details peptide-level expression change averaging (PECA) procedure, see Elo et al. (2005), Laajala et al. (2009) Suomi et al. PECA calculates peptide level changes using ordinary modified t-statistic. ordinary t-statistic calculated using function rowttests Bioconductor genefilter package. “modt” selected modified t-statistic calculated using limma package: modified t-statistic calculated using linear modeling approach Bioconductor limma package. empirical Bayes moderated t-statistics test individual contrast equal zero. protein, moderated F-statistic tests whether contrasts zero. F-statistic overall test computed set t-statistics peptide exactly analogous relationship t-tests F-statistics conventional anova, except residual mean squares moderated proteins. “rots” selected Reproducibility-Optimized Test Statistic (ROTS): reproducibility-optimization procedure (ROTS) enables selection suitable gene ranking statistic directly given dataset. statistic optimized among family t-type statistics \\[d_\\alpha = |\\overline{x}_1 - \\overline{x}_2| / (\\alpha_1 + \\alpha_2*s)\\], \\(|\\overline{x}_1 - \\overline{x}_2|\\) difference two group averages normalized peptide abundances, \\(\\alpha_1\\) \\(\\alpha_2\\) non-negative parameters optimized, \\(s\\) pooled standard error. optimal statistic determined maximizing reproducibility Z-score \\[Z_k(d_\\alpha) = (R_k  * d_\\alpha - R^0_k * d_\\alpha) / s_k * d_\\alpha\\] lattice \\(\\alpha_1\\\\{0,0.01, ...,5\\}\\) \\(\\alpha_2\\\\{0,1\\}\\), \\(k \\\\{0,1,2,...,F\\}\\), F total number peptides data \\(R^0_k * d_\\alpha\\) corresponding reproducibility randomized datasets permuted samples \\(s_k * d_\\alpha\\) standard deviation bootstrap distribution. Reproducibility defined average overlap \\(k\\) top-ranked peptides pairs bootstrapped datasets. protein-level inference differential expression, median peptide-level p-values used score protein taking direction change account. protein-level significance detection calculated using beta distribution. null hypothesis, p-values peptides follow uniform distribution U(0,1). Furthermore, order statistics U(0,1) distribution follow beta distribution. Finally, FDR calculated using Benjamini-Hochberg procedure. complex computation intense procedure allow precise estimate significance methods. details please see Suomi & Elo 2017 user given option adjust largest top list size considered reproducibility calculations, since lowering size can markedly reduce computation time. large data matrices thousands rows, generally recommend using size several thousands. smaller data matrices, especially many rows non-missing entries, size K decreased accordingly. ROTS tolerates moderate number missing values data matrix effectively ignoring contribution operation procedure. However, row data matrix must contain least two values groups. rows containing non-missing values removed; alternatively, missing data entries can imputed using, e.g., K-nearest neighbors imputation, implemented Bioconductor package impute. ROTS assumes input data matrix log2 transformed (default log parameter set TRUE). Although, affects fold change values, recommend setting log parameter FALSE input matrix log transformed avoid downstream confusions. parameter values a1 a2 set user, optimization performed statistic FDR-values calculated given parameters. false discovery rate (FDR) optimized test statistic calculated permuting sample labels. results genes can obtained setting FDR cutoff 1. significance expression change determined based analytical p-value protein-level test statistic. Unadjusted p-values reported along corresponding p-values looked beta ditribution. quality control filtering data (e.g. based low intensity peptide specificity) left user.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a04_SpectroPipeR_statistics.html","id":"effect-size-implementation-in-spectropiper","dir":"Articles","previous_headings":"SpectroPipeR statistics > background information","what":"Effect size implementation in SpectroPipeR","title":"SpectroPipeR - step 4 - statistics","text":"implemented effect size (Cohen’s d) peptide ratios per comparisons follows. peptide intensities used calculate mean scaled peptide intensities per protein. step important since peptides different intensities due different flyability mass spec. example two peptides injected 10fmol one flies much better , better flying peptide much higher intensity. Therefore need adjust effect scale peptides numeric region. scaling scaled peptides intensities used calculate Cohen’s d per protein comparison.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a04_SpectroPipeR_statistics.html","id":"example-code","dir":"Articles","previous_headings":"SpectroPipeR statistics","what":"example code","title":"SpectroPipeR - step 4 - statistics","text":"statistics_module() needs output norm_quant_module() ! condition_comparisons requires cbind() user specififed conditions","code":"# condition comparison example condition_comparisons_example <- cbind(                                 c(\"condition_1\",\"condition_control\"),                                 c(\"condition_2\",\"condition_control\"),                                 c(\"condition_3\",\"condition_control\")                                 ) # step 4: statistics module SpectroPipeR_data_stats <- statistics_module(SpectroPipeR_data_quant = SpectroPipeR_data_quant,                                        condition_comparisons = cbind(c(\"HYE mix A\",\"HYE mix B\"))) ##***************************************** ## STATISTICS MODULE ##***************************************** # #reformatting data ... #register processor cores ... #performing statistical analysis (this might take a while) ... #  |=============================================================================================| #100% #close cores ... # #start to end time comparison for stat. analysis: 0.00111424499087863 hours #estimating effect sizes ... # [============================================================]  100.00% - calc. effect sizes...  # #join and tidy tables ... #filtering statistical table using supplied cutoffs ... #writing output files ... #adding iBAQ quantiles to statistics table ...                                                                  #  #generating Excel outputs ...                                                                                   #  #performing fold-change cutoff sensitivity analysis ...                                                         #  #plotting fold-change cutoff sensitivity analysis ... # [================================================================================]  100.00% - 1  # #plotting fold-change simple cutoff sensitivity analysis (peptide n > 1)... # [================================================================================]  100.00% - 1  # #generating volcano plots ... # [============================================================]  100.00% - Volcano plots with adj. p-value  # [============================================================]  100.00% - Volcano plots with adj. p-value  # [============================================================]  100.00% - Volcano plots with raw p-value  # #condition-comparison-wise signal to noise comparison ... #...signal to noise: save scatter plot... #condition-comparison-wise comparison of peptide-int.-ratios vs. protein-int.-ratios ... #...calculating protein ratios... #...combining ratio tables... #...generating ratio-ratios: protein_ratios/peptide_ratios... #...filter for at least 2 peptides... #...adding of protein intensity to table... #...add signal to noise per group... #...add detection with selected q-value cutoff with at least 2 peptides per replicate... #...add direction comparison for protein or peptide condition comp. ratio... #...save table of stat. significant with poor signal to noise... #...counting protein which having a 2fold difference... #...select Top15 over- or under-estimated proteins... #...protein int. benchmark: save scatter plot... #...protein int. benchmark: save histogram plot... #...protein int. benchmark: save table... #...counting protein: gradient of difference...                                                                 #  #...protein int. benchmark: gradient of difference area plots... #statistical analysis module done --> please check outputs in folder: ../SpectroPipeR_test_folder/06_statistics/"},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a04_SpectroPipeR_statistics.html","id":"statistics_module-outputs","dir":"Articles","previous_headings":"SpectroPipeR statistics","what":"statistics_module() outputs","title":"SpectroPipeR - step 4 - statistics","text":"output specified output folder norm_quant_module() function look like example (06_statistics, 05_processed_data):","code":""},{"path":[]},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a04_SpectroPipeR_statistics.html","id":"volcano-plots","dir":"Articles","previous_headings":"SpectroPipeR statistics > statistics_module() outputs > statistics - figures","what":"volcano plots","title":"SpectroPipeR - step 4 - statistics","text":"volcano_plots_raw_p_value… illustrates volcano plot (raw p-value) statistical analysis specific comparison. blue color indicates lower abundance orange indicates higher abundance protein regard peptide ratios. blue, grey orange label depicts number proteins fraction. user specified p-value fold-change threshold used determine fractions. right panel plot Top10 (based euclidean distance) abundance differences highlighted lower upper fraction.  volcano_plots_adjusted_p_value… illustrates volcano plot (adjusted p-value / q-value) statistical analysis specific comparison.  volcano_plots_effect_size_shape_adjusted_p_value… illustrates volcano plot (adjusted p-value / q-value) statistical analysis specific comparison. point shape depicts estimated effect size.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a04_SpectroPipeR_statistics.html","id":"cut-off-plots","dir":"Articles","previous_headings":"SpectroPipeR statistics > statistics_module() outputs > statistics - figures","what":"cut-off plots","title":"SpectroPipeR - step 4 - statistics","text":"cutoff_test… & cutoff_simple_test… illustrate protein count varying fold-change threshold filter significant proteins. help estimate meaningful project specific fold-change cutoff statistical analysis.","code":""},{"path":[]},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a04_SpectroPipeR_statistics.html","id":"statistical_analysis-csv","dir":"Articles","previous_headings":"SpectroPipeR statistics > statistics_module() outputs > statistics - tables","what":"statistical_analysis.csv","title":"SpectroPipeR - step 4 - statistics","text":"statistical_analysis.csv holds information statistical analysis. slr: signal log2-ratios peptide basis t: t t-statistics peptide basis score: score t-statistics peptide basis n: number peptides p: raw p-value statistics peptide basis p.fdr: adjusted p-value (q-value) statistics peptide basis PG.ProteinGroups: Protein groups group1: group1 condition comparison group2: group2 condition comparison slr_ratio_meta: condition comparison; ratio formed test: test used statistics peptide level type: type ratio aggregation ProteinGroup level used signal log2-ratios peptide basis significant_changed: significant change FC & q-value (cutoffs e.g.: FC = 1.5 & adjusted-p-value = 0.05) significant_changed_raw_p: significant change FC & p-value (cutoffs e.g.: FC = 1.5 & p-value = 0.05) significant_changed_fc: fold-change cutoff used analysis significant_changed_p_value: p-value/q-value cutoff used analysis fold_change_absolute: ablsolute fold-change fold_change_direction: fold-change direction fold_change: fold-change effect_size_method: effect size estimation method used d: effect size estimate d_pooled_SD: effect size estimate; pooled SD d_95CI_lower: effect size estimate:lower 95% confidence interval d_95CI_upper: effect size estimate:upper 95% confidence interval d_magnitute: qualitative assessment magnitude effect size (|d|<0.2 negligible, |d|<0.5 small, |d|<0.8 medium, otherwise large); Cohen 1992 files statistical_analysis_filtered… contain information filtered :","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a04_SpectroPipeR_statistics.html","id":"statistical_analysis_2_more_peptides_per_protein_ibaq_quantiles-xlsx","dir":"Articles","previous_headings":"SpectroPipeR statistics > statistics_module() outputs > statistics - tables","what":"statistical_analysis_2_more_peptides_per_protein_iBAQ_quantiles.xlsx","title":"SpectroPipeR - step 4 - statistics","text":"Excel table statistical_analysis_2_more_peptides_per_protein_iBAQ_quantiles.xlsx (csv file also available) holds information statistical analysis iBAQ quantiles associated comparisons. slr: signal log2-ratios peptide basis iBAQ_quantile_comp: iBAQ quantiles comparison t: t t-statistics peptide basis score: score t-statistics peptide basis n: number peptides p: raw p-value statistics peptide basis p.fdr: adjusted p-value (q-value) statistics peptide basis PG.ProteinGroups: Protein groups group1: group1 condition comparison group2: group2 condition comparison slr_ratio_meta: condition comparison; ratio formed test: test used statistics peptide level type: type ratio aggregation ProteinGroup level used signal log2-ratios peptide basis significant_changed: significant change FC & q-value (cutoffs e.g.: FC = 1.5 & adjusted-p-value = 0.05) significant_changed_raw_p: significant change FC & p-value (cutoffs e.g.: FC = 1.5 & p-value = 0.05) significant_changed_fc: fold-change cutoff used analysis significant_changed_p_value: p-value/q-value cutoff used analysis fold_change_absolute: ablsolute fold-change fold_change_direction: fold-change direction fold_change: fold-change effect_size_method: effect size estimation method used d: effect size estimate d_pooled_SD: effect size estimate; pooled SD d_95CI_lower: effect size estimate:lower 95% confidence interval d_95CI_upper: effect size estimate:upper 95% confidence interval d_magnitute: qualitative assessment magnitude effect size (|d|<0.2 negligible, |d|<0.5 small, |d|<0.8 medium, otherwise large); Cohen 1992 group1__mean_iBAQ: mean iBAQ intensity group 1 group_1__iBAQ_quantiles: iBAQ intensity quantile group 1 group2__mean_iBAQ: mean iBAQ intensity group 2 group_2__iBAQ_quantiles: iBAQ intensity quantile group 2 statistical_analysis_2_more_peptides_per_protein_iBAQ_quantiles.xlsx holds information statistical analysis.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a04_SpectroPipeR_statistics.html","id":"statistical_analysis_wide_format_2_more_peptides_per_protein-csvxlsx","dir":"Articles","previous_headings":"SpectroPipeR statistics > statistics_module() outputs > statistics - tables","what":"statistical_analysis_WIDE_FORMAT_2_more_peptides_per_protein.csv/xlsx","title":"SpectroPipeR - step 4 - statistics","text":"statistical_analysis_WIDE_FORMAT_2_more_peptides_per_protein contains information statistical analysis wide-tabular format. “comparison”;signal_log2_ratio: signal log2-ratios peptide basis specific comparison “comparison”;raw_p_value: raw p-value specific comparison “comparison”;adjusted_p_value: adjusted p-value specific comparison","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a04_SpectroPipeR_statistics.html","id":"protein-intensity-estimation-comparison","dir":"Articles","previous_headings":"SpectroPipeR statistics","what":"protein intensity estimation comparison","title":"SpectroPipeR - step 4 - statistics","text":"Since bottom-proteomics measures ions/peptides directly proteins protein intensity estimation slightly biased depending algorithm used. ROPECA statistics used peptide ratios can compared protein intensity ratios. ratio comparison give researchers insights performance agreement various protein intensity estimation algorithms used proteomics data analysis. information can valuable selecting appropriate estimation method protein candidates per comparison.","code":""},{"path":[]},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a04_SpectroPipeR_statistics.html","id":"protein_intensity_benchmark__scatter_plot","dir":"Articles","previous_headings":"SpectroPipeR statistics > protein intensity estimation comparison > processed data - figures","what":"Protein_intensity_benchmark__scatter_plot","title":"SpectroPipeR - step 4 - statistics","text":"Protein_intensity_benchmark__scatter_plot plot depicts peptide intensity ratio x-axis protein intensity ratio y-axis proteins 2 peptides. solid line shows diagonal dashed lines indicate 2fold difference. count highlights number proteins affected difference abs. 2 fold-change. size dots illustrate number peptides. Usually proteins low number peptides stronger affected difference protein intensity estimation ratios, e.g. MaxLFQ ratios, vs. peptide ratios.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a04_SpectroPipeR_statistics.html","id":"protein_intensity_benchmark__ma_like_plot","dir":"Articles","previous_headings":"SpectroPipeR statistics > protein intensity estimation comparison > processed data - figures","what":"Protein_intensity_benchmark__MA_like_plot","title":"SpectroPipeR - step 4 - statistics","text":"Protein_intensity_benchmark__MA_like_plot plot depicts MA-like plot mean protein intensity (x-axis) peptide ratio / protein ratio y-axis. Usually proteins low abundant range stronger affected difference protein intensity estimation ratios peptide ratios. solid line shows diagonal dashed lines indicate 2fold difference. count highlights number proteins affected difference abs. 2 fold-change. size dots illustrate number peptides. Usually proteins low number peptides stronger affected difference protein intensity estimation ratios, e.g. MaxLFQ ratios, peptide ratios.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a04_SpectroPipeR_statistics.html","id":"protein_intensity_benchmark__histogram_plot","dir":"Articles","previous_headings":"SpectroPipeR statistics > protein intensity estimation comparison > processed data - figures","what":"Protein_intensity_benchmark__histogram_plot","title":"SpectroPipeR - step 4 - statistics","text":"Protein_intensity_benchmark__histogram_plot plot depicts histogram peptide ratio / protein ratio x-axis.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a04_SpectroPipeR_statistics.html","id":"protein_intensity_benchmark__fc_gradient_area_plot","dir":"Articles","previous_headings":"SpectroPipeR statistics > protein intensity estimation comparison > processed data - figures","what":"Protein_intensity_benchmark__FC_gradient_area_plot","title":"SpectroPipeR - step 4 - statistics","text":"Protein_intensity_benchmark__FC_gradient_area_plot presents area plot across range fold-changes. instance, 1.5-fold change threshold, 76 proteins protein ratio 1.5-fold high, 2 proteins protein ratio 1.5-fold low compared peptide ratios.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a04_SpectroPipeR_statistics.html","id":"protein_intensity_benchmark__barplot","dir":"Articles","previous_headings":"SpectroPipeR statistics > protein intensity estimation comparison > processed data - figures","what":"Protein_intensity_benchmark__barplot","title":"SpectroPipeR - step 4 - statistics","text":"Protein_intensity_benchmark__barplot displays stacked bar plot, summarizing number proteins exhibit protein intensity ratio exceeding 2-fold difference compared peptide ratio.","code":""},{"path":[]},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a04_SpectroPipeR_statistics.html","id":"protein_intensity_benchmark__table-csv","dir":"Articles","previous_headings":"SpectroPipeR statistics > protein intensity estimation comparison > processed data - tables","what":"Protein_intensity_benchmark__table.csv","title":"SpectroPipeR - step 4 - statistics","text":"Protein_intensity_benchmark__table.csv table holds information protein intensity ratio vs. peptide intensity ratios protein level.","code":""},{"path":[]},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a04_SpectroPipeR_statistics.html","id":"table","dir":"Articles","previous_headings":"","what":"SpectroPipeR - step 4 - statistics","title":"SpectroPipeR - step 4 - statistics","text":"Protein_intensity_benchmark__table_top15.csv table holds information Top15 deviating ratio / ratio comparisons.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a05_SpectroPipeR_reporting.html","id":"spectropiper-reporting","dir":"Articles","previous_headings":"","what":"SpectroPipeR reporting","title":"SpectroPipeR - step 5 - reporting","text":"reporting module takes inputs : step 1 - read Spectronaut data step 2 - normalization quantification step 5 - statistics (optional) render interactive standalone HTML report. rendering performed Quarto CLI. install Quarto CLI using Quarto get started installation.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a05_SpectroPipeR_reporting.html","id":"spectropiper-functions-executed-before","dir":"Articles","previous_headings":"SpectroPipeR reporting","what":"SpectroPipeR functions executed before","title":"SpectroPipeR - step 5 - reporting","text":"","code":"# parameter list params <- list(output_folder = \"../SpectroPipeR_test_folder\",                 ion_q_value_cutoff = 0.01,                              id_drop_cutoff = 0.3,                                    normalization_method = \"median\",                         normalization_factor_cutoff_outlier = 4,                 filter_oxidized_peptides = FALSE,                        protein_intensity_estimation = \"MaxLFQ\",                 stat_test = \"modt\",                                      type_slr = \"median\",                                     fold_change = 1.5,                                       p_value_cutoff = 0.05,                                   paired = FALSE                            )  # example input file, bundled with SpectroPipeR package example_file_path <- system.file(\"extdata\", \"SN_test_HYE_mix_file.tsv\", package=\"SpectroPipeR\")  # step 1: load Spectronaut data module SpectroPipeR_data <- read_spectronaut_module(file = example_file_path,                                       parameter = params,                                       print.plot = FALSE)  # step 2: normalize & quantification module SpectroPipeR_data_quant <- norm_quant_module(SpectroPipeR_data = SpectroPipeR_data,print.plot = FALSE)  # step 3: MVA module MVA_module(SpectroPipeR_data_quant = SpectroPipeR_data_quant)  # step 4: statistics module SpectroPipeR_data_stats <- statistics_module(SpectroPipeR_data_quant = SpectroPipeR_data_quant,                                        condition_comparisons = cbind(c(\"B_manual\",\"A_manual\")))"},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a05_SpectroPipeR_reporting.html","id":"report-generation","dir":"Articles","previous_headings":"SpectroPipeR reporting","what":"Report generation","title":"SpectroPipeR - step 5 - reporting","text":"","code":"# step 5: report module SpectroPipeR_report_module(SpectroPipeR_data = SpectroPipeR_data,                      SpectroPipeR_data_quant = SpectroPipeR_data_quant,                      SpectroPipeR_data_stats = SpectroPipeR_data_stats) # #***************************************** # # REPORT MODULE # #***************************************** #  # generating methods part ... # render HTML report ... this might take a while  #  # processing file: DIA_MS_analysis_report_Master.qmd #   |...............                                    |  30%                   # A tibble: 1 × 1 #   value #   <chr> # 1 0.01  #                                            # output file: DIA_MS_analysis_report_Master.knit.md #  # pandoc --output SpectroPipeR_report.html #   to: html #   standalone: true #   self-contained: true #   section-divs: true #   html-math-method: katex #   wrap: none #   default-image-extension: png #   css: #     - styles.css #   toc: true #   toc-depth: 3 #    # metadata #   document-css: false #   link-citations: true #   date-format: long #   lang: en #   title: SpectroPipeR DIA-MS analysis report #   author: Stephan Michalik #   date: '`r format(Sys.Date(), \"%B %d, %Y\")`' #   title-block-banner: '#151515' #   subtitle: automatically generated report #   page-layout: full #   toc-title: Contents #   theme: united #   highlight: tango #   df_print: paged #   toc-location: left #   anchor-sections: true #   smooth-scroll: true #    # Output created: SpectroPipeR_report.html #  # render HTML report ... DONE!"},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a05_SpectroPipeR_reporting.html","id":"spectropiper_report_module-output","dir":"Articles","previous_headings":"SpectroPipeR reporting","what":"SpectroPipeR_report_module() output","title":"SpectroPipeR - step 5 - reporting","text":"function executed SpectroPipeR_report.html file generated inside output folder.","code":""},{"path":[]},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a06_SpectroPipeR_XIC_plot.html","id":"introduction","dir":"Articles","previous_headings":"SpectroPipeR XIC extraction and plotting","what":"introduction","title":"SpectroPipeR - XIC plotting","text":"Evaluating results directly raw data highly recommended. commercially licensed Spectronaut software offers functionality, free Spectronaut Viewer can also used purpose. However, proteomics research facilities, heavily utilized full Spectronaut licenses can become bottleneck routine tasks like XIC (Extracted Ion Chromatogram) inspection. address , SpectroPipeR offers ability extract plot XICs directly, Spectronaut Pipeline analysis generated corresponding SQLite files per raw file. setting can found within Spectronaut checked “Pipeline Mode” settings. Spectronaut analysis utilized SpectroPipeR report export scheme (accessible function Spectronaut_export_scheme(output_location = \"../SpectroPipeR_test_folder\")) enabled XIC SQLite export, separate folder containing individual SQLite files raw file present within Spectronaut reporting folder. order generate XIC plots user just point Spectronaut report XIC SQLite folder produce XIC pdf files desired also ion specific csv files XICs.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a06_SpectroPipeR_XIC_plot.html","id":"example-code","dir":"Articles","previous_headings":"SpectroPipeR XIC extraction and plotting","what":"example code","title":"SpectroPipeR - XIC plotting","text":"output folder user can find plots csv files protein group selected ion XICs (MS1/MS2).","code":"library(SpectroPipeR)  #setup example input paths / protein selection for plotting  Spectronaut_report_path <- system.file(\"extdata/HYE_demo_data\",                                         \"HYE_demo_data_Report_SpectroPipeR.tsv\",                                          package=\"SpectroPipeR\")  Spectronaut_xicDB_path <- system.file(\"extdata/HYE_demo_data/XIC_DBs\",package=\"SpectroPipeR\")  protein_groups <- c(\"P29311\",\"P38720\")  output_path <- \"../SpectroPipeR_test_folder/single_XIC_plots\"   # extracting and plotting of XIC  XIC_plot_module(Spectronaut_report_path = Spectronaut_report_path,                  Spectronaut_xicDB_path = Spectronaut_xicDB_path,                  protein_groups = protein_groups,                  output_path = output_path,                  export_csv_files = TRUE,                  number_of_cores = 2  ) #> create output dir ... #> loading Spectronaut report data ... #> extract ion meta data from report ... #> extract ion IDs of selected proteins groups ... #>  [============================================================]  100.00% - XIC extraction...  #>  #> add ion meta data to extracted XICs ... #> register processor cores #> plotting (this might take a while) ... #>   |============================================================| 100% #> DONE ..."},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a06_SpectroPipeR_XIC_plot.html","id":"explanation-of-depicted-scores","dir":"Articles","previous_headings":"SpectroPipeR XIC extraction and plotting","what":"explanation of depicted scores","title":"SpectroPipeR - XIC plotting","text":"Description Spectronaut scores shown output plots:","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a07_Gprofiler2_code_suggestion.html","id":"gprofiler2-code-suggestion","dir":"Articles","previous_headings":"","what":"Gprofiler2 code suggestion","title":"SpectroPipeR - stat. results functional enrichment analysis","text":"","code":"# install gprofiler2 package install.packages(\"gprofiler2\")  # load packages library(gprofiler2) library(tidyverse)  #set working directory or create RStudio project inside your SpectroPipeR output folder setwd(\"[your working directory or SpectroPipeR output folder]\")  # load SpectroPipeR statistics -------------------------------------------- #path to statistical_analysis.csv stats <- read_csv(\"[path]/statistical_analysis.csv\")  # filter statistics ------------------------------------------------------- stats_filtered <- stats %>%   # filter for ≥2 peptides   filter(n>=2) %>%   # filter for FC & q-value   filter(fold_change_absolute >= 2 & p.fdr <= 0.05)   # get statistical comparisons --------------------------------------------- comparison <- unique(stats_filtered$slr_ratio_meta)   # generate output folder -------------------------------------------------- dir.create(\"gprofiler_query_Results\",showWarnings = F)   # perform Gprofiler analysis in a for loop over comparisons --------------- for(i in comparison){    # filter data for comparison   grpofiler_input <- stats_filtered %>%     filter(slr_ratio_meta %in% i)    # Gene list functional enrichment.   #   # run gprofiler   # query         - character vector of protein IDs   # significant   - whether all or only statistically significant results should be returned.   # organism      - Organism names are constructed by concatenating the first letter of the name and   #                 the family name. Example: human - 'hsapiens', mouse - 'mmusculus'    grpofiler_res<- gost(query = grpofiler_input$PG.ProteinGroups,                        significant = T, # only statistically significant results should be returned                        organism = \"hsapiens\" # select the right organism                        )    # write grpofiler results container   write_rds(x = grpofiler_res,file = paste0(\"gprofiler_query_Results/\",                                             str_replace_all(i,\"/\",\"_vs_\"),\".rds\"))   # write grpofiler results table   write_csv(x = as_tibble(grpofiler_res$result),             file = paste0(\"gprofiler_query_Results/\",str_replace_all(i,\"/\",\"_vs_\"),\".csv\"))    # write grpofiler results plot   publish_gostplot(     p = gostplot(grpofiler_res, interactive = FALSE),     highlight_terms = NULL,     filename = paste0(\"gprofiler_query_Results/\",str_replace_all(i,\"/\",\"_vs_\"),\"__plot.png\"),     width = NA,     height = NA   )    # write grpofiler results table   publish_gosttable(     gostres = grpofiler_res,     filename = paste0(\"gprofiler_query_Results/\",str_replace_all(i,\"/\",\"_vs_\"),\"__table.png\"),     highlight_terms = grpofiler_res$result$term_id[which(grpofiler_res$result$p_value<1E-16)]   ) }"},{"path":"https://stemicha.github.io/SpectroPipeR/articles/a07_Gprofiler2_code_suggestion.html","id":"results","dir":"Articles","previous_headings":"Gprofiler2 code suggestion","what":"results","title":"SpectroPipeR - stat. results functional enrichment analysis","text":"Upon execution mentioned code, obtain comprehensive functional enrichment analysis statistical results SpectroPipeR. analysis encapsulated within result container file (.rds), providing robust reusable data structure exploration. Additionally, output includes structured table visually compelling plot, offering tabular graphical representations analysis results.","code":""},{"path":[]},{"path":[]},{"path":"https://stemicha.github.io/SpectroPipeR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stephan Michalik. Author, maintainer.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Michalik S (2024). SpectroPipeR: R pipeline downstream analysis Spectronaut DIA-MS data. R package version 0.3.0.","code":"@Manual{,   title = {SpectroPipeR: R pipeline for the downstream analysis of Spectronaut DIA-MS data},   author = {Stephan Michalik},   year = {2024},   note = {R package version 0.3.0}, }"},{"path":"https://stemicha.github.io/SpectroPipeR/index.html","id":"spectropiper-","dir":"","previous_headings":"","what":"R pipeline for the downstream analysis of Spectronaut DIA-MS data","title":"R pipeline for the downstream analysis of Spectronaut DIA-MS data","text":"streamlining post Spectronaut™ DIA-MS data analysis R package manual can found https://stemicha.github.io/SpectroPipeR/","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"R pipeline for the downstream analysis of Spectronaut DIA-MS data","text":"proteome studies, researchers frequently face various challenges, can mitigated others . prevalent issue bottleneck downstream data analysis, arises due limited number bioinformaticians, rapid generation raw data, variations data analysis methods workflows. tackle problem SpectroPipeR developed. pipeline designed simplify data analysis tasks, significantly reduce workload scientists, easily expandable, user-friendly even minimal bioinformatics knowledge, generate standardized analysis, outputs, reports project, produce publication-ready tables, figures, reports. SpectroPipeR comprises set R functions facilitate comprehensive, fully automated, standardized data analysis Spectronaut DIA-MS data. includes ID rate summary, /analysis, normalization, batch covariate adjustment, iBAQ maxLFQ quantification, multivariate analysis, peptide-centric statistical analysis (ROPECA modified t-test), interactive HTML report generation. output presented variety clear graphs tables well-structured folder system. comprehensive standalone HTML report extremely useful existing Electronic Laboratory Notebooks (ELN) Laboratory Information Management Systems (LIMS) quickly obtain project-specific overview. SpectroPipeR consists global parameter setting four analysis modules one reporting module executed sequentially. modular approach allows flexibility specific analyses like ID- intensity plots can run independently part complete pipeline. module execution, dynamic console feedback provided written log file help identify errors early . Upon completion modules, comprehensive set tables plots categorized different folders generated summarize project various perspectives. SpectroPipeR includes also module XIC plotting, capable generating protein-specific XIC plots ion associated protein. complemented range significant metrics designed aid evaluating accuracy identification quantification.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R pipeline for the downstream analysis of Spectronaut DIA-MS data","text":"can install development version SpectroPipeR like :","code":"#install devtools install.packages(\"devtools\") # install SpectroPipeR from github devtools::install_github(\"stemicha/SpectroPipeR\")  # quit and restart R or restart R session in Rstudio"},{"path":"https://stemicha.github.io/SpectroPipeR/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"R pipeline for the downstream analysis of Spectronaut DIA-MS data","text":"interactive html report feature SpectroPipeR needs Quarto CLI. Quarto open-source scientific technical publishing system. can install Quarto CLI using Quarto get started installation.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/index.html","id":"spectronaut-report-requirements","dir":"","previous_headings":"","what":"Spectronaut report requirements","title":"R pipeline for the downstream analysis of Spectronaut DIA-MS data","text":"SpectroPipeR requires certain columns Spectronaut output report included default. following steps advised: Proceed download installation SpectroPipeR directed Utilize Spectronaut_export_scheme() function create necessary Spectronaut report scheme (SpectroPipeR_report.rs). Import generated SpectroPipeR report scheme Spectronaut Conduct analysis raw mass spectrometry data Spectronaut define conditions analysis setup process produce output report using imported SpectroPipeR report scheme Spectronaut output report contain following columns work SpectroPipeR (included using scheme generated Spectronaut_export_scheme()): mandatory Spectronaut report columns: R.FileName, R.Condition, R.Replicate, R.Instrument Name, R.Raw File Name, R.MS1 Mass Analyzer, R.MS2 Mass Analyzer, R.Run Date, PG.ProteinGroups, PG.Organisms, PG.IBAQ, PEP.StrippedSequence, EG.ModifiedPeptide, PEP.NrOfMissedCleavages, EG.UserGroup, EG.Qvalue, EG.PEP, EG.Cscore, EG.NormalizationFactor, EG.TotalQuantity (Settings), EG.SignalToNoise, EG.Identified, EG.ApexRT, EG.IntCorrScore, EG.DatapointsPerPeak, EG.DatapointsPerPeak (MS1), FG.Charge, FG.Id, FG.XICDBID, FG.LabeledSequence, FG.ShapeQualityScore, FG.MS1Quantity, FG.MS2Quantity, FG.MS1RawQuantity, FG.MS2RawQuantity EG.TotalQuantity (Settings) used quantification. Per default MS2 level selected quantification setting Spectronaut™.","code":"Spectronaut_export_scheme(output_location = \"../SpectroPipeR_test_folder\")"},{"path":[]},{"path":"https://stemicha.github.io/SpectroPipeR/index.html","id":"all-in-one-function-example","dir":"","previous_headings":"Example","what":"all-in-one function example:","title":"R pipeline for the downstream analysis of Spectronaut DIA-MS data","text":"","code":"# load library library(SpectroPipeR)  # use default parameters list params <- list(output_folder = \"../SpectroPipeR_test_folder\")  # example input file example_file_path <- system.file(\"extdata\", \"SN_test_HYE_mix_file.tsv\", package=\"SpectroPipeR\")  # launch analysis SpectroPipeR_analysis <- SpectroPipeR(file = example_file_path,                                       parameter = params,                                       condition_comparisons = cbind(c(\"HYE mix A\",                                                                       \"HYE mix B\"))                                       )"},{"path":"https://stemicha.github.io/SpectroPipeR/index.html","id":"single-function-execution-example","dir":"","previous_headings":"Example","what":"single function execution example:","title":"R pipeline for the downstream analysis of Spectronaut DIA-MS data","text":"necessary packages correctly installed, can also execute SpectroPipeR analysis terminal using bash. Sometimes, extensive analyses require computational power memory, might beneficial run server. basic example can use starting point, can save “SpectroPipeR_terminal.sh” Example terminal usage: bash SpectroPipeR_terminal.sh [input_file] [named parameters separated ;] [condition comparisons separated ;]","code":"# load library library(SpectroPipeR)   # use default parameters list params <- list(output_folder = \"../SpectroPipeR_test_folder\")  # example input file example_file_path <- system.file(\"extdata\",                                  \"SN_test_HYE_mix_file.tsv\",                                  package=\"SpectroPipeR\")  # step 1: load Spectronaut data module SpectroPipeR_data <- read_spectronaut_module(file = example_file_path,                                              parameter = params)  # step 2: normalize & quantification module SpectroPipeR_data_quant <- norm_quant_module(SpectroPipeR_data = SpectroPipeR_data)  # step 3: MVA module SpectroPipeR_MVA <- MVA_module(SpectroPipeR_data_quant = SpectroPipeR_data_quant,            HCPC_analysis = FALSE)  # step 4: statistics module SpectroPipeR_data_stats <- statistics_module(SpectroPipeR_data_quant = SpectroPipeR_data_quant,                                        condition_comparisons = cbind(c(\"HYE mix A\",                                                                       \"HYE mix B\")))  # step 5: report module SpectroPipeR_report_module(SpectroPipeR_data = SpectroPipeR_data,                            SpectroPipeR_data_quant = SpectroPipeR_data_quant,                            SpectroPipeR_data_stats = SpectroPipeR_data_stats) #!/bin/bash  # Command line arguments input_file=$1 parameter=$2 condition_comparisons=$3   # usage # bash SpectroPipeR_terminal.sh \"SN_test_HYE_mix_file.tsv\" \"output_folder=SpectroPipeR_test_folder;stat_test=modt;ion_q_value_cutoff=0.001\" \"HYE mix A,HYE mix B;HYE mix B,HYE mix A\"  # R script Rscript -e \" library(SpectroPipeR)  print(\\\"$parameter\\\") print(\\\"$input_file\\\") print(\\\"$condition_comparisons\\\")   # split parameters params <- strsplit(\\\"$parameter\\\",split = \\\";\\\") params <- strsplit(unlist(params),\\\"=\\\") names(params) <- lapply(params, function(x) x[1]) params <- lapply(params, function(x) x[2])  # convert parameters class convert_params <- function(params) {   numeric_params = c(\\\"ion_q_value_cutoff\\\",                      \\\"id_drop_cutoff\\\",                      \\\"normalization_factor_cutoff_outlier\\\",                      \\\"fold_change\\\",                      \\\"p_value_cutoff\\\")   logical_params = c(\\\"filter_oxidized_peptides\\\",                      \\\"paired\\\")   # iterate over each parameter   for (param in names(params)) {     # check if parameter is in numeric_params     if (param %in% numeric_params) {       # convert to numeric       params[[param]] <- as.numeric(params[[param]])     }     # check if parameter is in logical_params     else if (param %in% logical_params) {       # convert to logical       params[[param]] <- as.logical(params[[param]])     }   }   return(params) }  params <- convert_params(params)  # split condition comparisons cond_comp <- strsplit(\\\"$condition_comparisons\\\",split = \\\";\\\") cond_comp <- sapply(unlist(cond_comp), function(x) strsplit(x,split = \\\",\\\")) cond_comp <- do.call(cbind,cond_comp)  class(params) print(params)  # perform the analysis SpectroPipeR_analysis <- SpectroPipeR(file = \\\"$input_file\\\",                                      parameter = params,                                      condition_comparisons = cond_comp                                      ) \" bash SpectroPipeR_terminal.sh \"SN_test_HYE_mix_file.tsv\" \"output_folder=SpectroPipeR_test_folder;stat_test=modt;ion_q_value_cutoff=0.001\" \"HYE mix A,HYE mix B;HYE mix B,HYE mix A\""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/MVA_module.html","id":null,"dir":"Reference","previous_headings":"","what":"SpectroPipeR: MVA module — MVA_module","title":"SpectroPipeR: MVA module — MVA_module","text":"Function conducting multivariate analysis, represents third step pipeline builds upon normalization quantification module step 2.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/MVA_module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SpectroPipeR: MVA module — MVA_module","text":"","code":"MVA_module(   SpectroPipeR_data_quant = NULL,   HCPC_analysis = FALSE,   costum_colors = NULL )"},{"path":"https://stemicha.github.io/SpectroPipeR/reference/MVA_module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SpectroPipeR: MVA module — MVA_module","text":"SpectroPipeR_data_quant SpectroPipeR_data_quant list object norm_quant_module() object e.g. data_input_norm_quant see example HCPC_analysis boolean; HCPC performed costum_colors like use colors please provide named color vector (e.g. c(condition1 = \"black\", condition2 = \"grey\")); names naming length like conditions set Spectronaut","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/MVA_module.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SpectroPipeR: MVA module — MVA_module","text":"saves MVA analysis results output folder SpectroPipeR_data_MVA list object MVA analysis data addition automatically saved tables plots description generated figures tables please read manual & vignettes","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/MVA_module.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SpectroPipeR: MVA module — MVA_module","text":"","code":"#load library library(SpectroPipeR)  # use default parameters list params <- list(output_folder = \"../SpectroPipeR_test_folder\")  # example input file example_file_path <- system.file(\"extdata\",                                 \"SN_test_HYE_mix_file.tsv\",                                 package=\"SpectroPipeR\")  # step 1: load Spectronaut data module SpectroPipeR_data <- read_spectronaut_module(file = example_file_path,                                             parameter = params,                                             print.plot = FALSE)  # step 2: normalize & quantification module SpectroPipeR_data_quant <- norm_quant_module(SpectroPipeR_data = SpectroPipeR_data)  # step 3: MVA module SpectroPipeR_MVA <- MVA_module(SpectroPipeR_data_quant = SpectroPipeR_data_quant,           HCPC_analysis = FALSE)"},{"path":"https://stemicha.github.io/SpectroPipeR/reference/SpectroPipeR.html","id":null,"dir":"Reference","previous_headings":"","what":"SpectroPipeR: complete Spectronaut analysis with one function — SpectroPipeR","title":"SpectroPipeR: complete Spectronaut analysis with one function — SpectroPipeR","text":"Function performing whole SpectroPipeR analysis workflow.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/SpectroPipeR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SpectroPipeR: complete Spectronaut analysis with one function — SpectroPipeR","text":"","code":"SpectroPipeR(   file = \"\",   parameter = list(),   max_chars_file_name_capping = 25,   ID_condition_filtering = FALSE,   ID_condition_filtering_percent = 0.5,   batch_adjusting = FALSE,   sample__batch_meta_data_file = NULL,   batch_adjusting_column = \"\",   number_of_cores_adjusting = parallel::detectCores() - 2,   covariate_adjusting_formula = \"\",   covariate_adjusting_meta_data_file = \"\",   skipping_MaxLFQ_median_norm = FALSE,   HCPC_analysis = FALSE,   costum_colors = NULL,   condition_comparisons = NULL,   number_of_cores_statistics = 2,   build_HTML_report = TRUE )"},{"path":"https://stemicha.github.io/SpectroPipeR/reference/SpectroPipeR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SpectroPipeR: complete Spectronaut analysis with one function — SpectroPipeR","text":"file location (path) Spectronaut output report; use Spectronaut_export_scheme() function getting SpectroPipeR report scheme encompassing mandatory columns parameter mandatory parameter list element table list elements: max_chars_file_name_capping integer, (default = 25) number max characters used raw file name presentation; must adjusted function ID_condition_filtering TRUE FALSE condition-wise filtering performed ID_condition_filtering_percent (numerical value ranging 0 - 1, default = 0.5) define proportion condition-wise ID filtering batch_adjusting logical - batch adjusting ComBat (sva package) performed; default = FALSE sample__batch_meta_data_file character - sample batch file; tab-delimited txt-file, containing \"R.FileName\" column e.g. sample__batch_meta_data_file = \"Sample_MetaData_Batches.txt\" example table batch meta data: good starting point generation table '*_ConditionSetup.tsv' Spectronaut Pipeline Report export folder batch_adjusting_column character - column name sample__batch_meta_data_file, used assigning samples batches number_of_cores_adjusting numeric - number processor cores used batch covariate adjustment covariate_adjusting_formula character - provide formula passed lm() covariate adjustment e.g. \"log10_peptide_intensity ~ log10(CRP)+log10(age)+.factor(sex)\"; may also use ns() function e.g. \"log10_peptide_intensity ~ ns(age, df=3)\" covariate_adjusting_meta_data_file covariate meta csv file, containing \"R.FileName; age; sex;...\"; may find start file 02_ID_rate folder > file_list.csv column e.g. covariate_adjusting_meta_data_file = \"covariate_MetaData_file.csv\" example table covariate meta data: skipping_MaxLFQ_median_norm logical - median normalization MaxLFQ calculation skipped; default = FALSE; applied MaxLFQ protein estimation selected HCPC_analysis boolean; HCPC performed costum_colors like use colors condition coloring please provide named color vector (e.g. c(condition1 = \"black\", condition2 = \"grey\")); names naming length like conditions set Spectronaut condition_comparisons condition comparisons pairwise- comparison; e.g. condition_comparisons <- cbind(c(\"condition1\",\"control\"),c(\"condition3\",\"control\") ) number_of_cores_statistics number processor cores used calculations default = 2; parallel::detectCores()-2 faster processing (detect number cores system use nearly cores) build_HTML_report boolean; HTML report analysis generated ","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/SpectroPipeR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SpectroPipeR: complete Spectronaut analysis with one function — SpectroPipeR","text":"SpectroPipeR list object containing tables plots analysis addition automatically saved tables plots. description generated figures tables please read manual & vignettes SpectroPipeR list element contains: SpectroPipeR_data SpectroPipeR_data_quant SpectroPipeR_data_MVA SpectroPipeR_data_stats SpectroPipeR_data: SpectroPipeR_data_quant: SpectroPipeR_data_MVA: SpectroPipeR_data_stats:","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/SpectroPipeR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SpectroPipeR: complete Spectronaut analysis with one function — SpectroPipeR","text":"batch adjustment Batch effects refer systematic differences batches (groups) samples high-throughput experiments. differences can arise due various factors, batch variations sample preparation, handling, processing procedures measurement orders. Batch effects can obscure true biological signal lead incorrect conclusions properly accounted . SpectroPipeR pipeline, ComBat tool employed adjust batch effects datasets batch covariate known. ComBat utilizes methodology described Johnson et al. 2007. uses empirical Bayes (EB) framework adjusting data batch effects robust outliers small sample sizes performs comparable existing methods large samples. Johnson et al. 2007: method incorporates systematic batch biases common across genes making adjustments, assuming phenomena resulting batch effects often affect many genes similar ways (.e. increased expression, higher variability, etc). Specifically, L/S model parameters estimated represent batch effects pooling information across peptides batch shrink batch effect parameter estimates toward overall mean batch effect estimates (across genes). EB estimates used adjust data batch effects, providing robust adjustments batch effect peptide. SpectroPipeR parametric ComBAT emperical Bayes adjustment implemented utilizing sva-package. covariate adjustment covariate adjustment peptide intensity data performed using users input formula, linear mixed model (LMM) calculated based formula per peptide outcoming residuals added mean peptide intensity samples. means adjusted peptide intensities retain intensity level (low intense peptides keep low intensity high intense ions keep higher intensity).","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/SpectroPipeR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SpectroPipeR: complete Spectronaut analysis with one function — SpectroPipeR","text":"","code":"# load library library(SpectroPipeR)  # use default parameters list params <- list(output_folder = \"../SpectroPipeR_test_folder\")  # example input file example_file_path <- system.file(\"extdata\",                                 \"SN_test_HYE_mix_file.tsv\",                                 package=\"SpectroPipeR\") # perform the analysis SpectroPipeR_analysis <- SpectroPipeR(file = example_file_path,                                      parameter = params,                                      condition_comparisons = cbind(c(\"HYE mix A\",\"HYE mix B\"))                                      )"},{"path":"https://stemicha.github.io/SpectroPipeR/reference/SpectroPipeR_logo_export.html","id":null,"dir":"Reference","previous_headings":"","what":"SpectroPipeR - logo export — SpectroPipeR_logo_export","title":"SpectroPipeR - logo export — SpectroPipeR_logo_export","text":"SpectroPipeR - logo export","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/SpectroPipeR_logo_export.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SpectroPipeR - logo export — SpectroPipeR_logo_export","text":"","code":"SpectroPipeR_logo_export(output_location = \"\")"},{"path":"https://stemicha.github.io/SpectroPipeR/reference/SpectroPipeR_logo_export.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SpectroPipeR - logo export — SpectroPipeR_logo_export","text":"output_location folder location SpectroPipeR logo copied","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/SpectroPipeR_logo_export.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SpectroPipeR - logo export — SpectroPipeR_logo_export","text":"copies SpectroPipeR logo designated folder","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/SpectroPipeR_logo_export.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SpectroPipeR - logo export — SpectroPipeR_logo_export","text":"","code":"SpectroPipeR_logo_export(output_location = \"../SpectroPipeR_test_folder\")"},{"path":"https://stemicha.github.io/SpectroPipeR/reference/SpectroPipeR_report_module.html","id":null,"dir":"Reference","previous_headings":"","what":"SpectroPipeR: report module — SpectroPipeR_report_module","title":"SpectroPipeR: report module — SpectroPipeR_report_module","text":"Function generating interactive analysis report (HTML file). final part SpectroPipeR pipeline analysis modules output serves input.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/SpectroPipeR_report_module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SpectroPipeR: report module — SpectroPipeR_report_module","text":"","code":"SpectroPipeR_report_module(   SpectroPipeR_data = NULL,   SpectroPipeR_data_quant = NULL,   SpectroPipeR_data_stats = NULL,   open_rendered_report = FALSE )"},{"path":"https://stemicha.github.io/SpectroPipeR/reference/SpectroPipeR_report_module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SpectroPipeR: report module — SpectroPipeR_report_module","text":"SpectroPipeR_data (mandatory) SpectroPipeR_data list object read_spectronaut_module() object e.g. SpectroPipeR_data please see example SpectroPipeR_data_quant (mandatory) SpectroPipeR_data_quant list object norm_quant_module() object e.g. SpectroPipeR_data_quant please see example SpectroPipeR_data_stats (optional) SpectroPipeR_data_quant list object statistics_module() object e.g. SpectroPipeR_data_stats please see example ; 1 replicate data set statistical analysis possible leave parameter NULL report without statitsics generated open_rendered_report logical - rendered report opened (TRUE FALSE); default = FALSE","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/SpectroPipeR_report_module.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SpectroPipeR: report module — SpectroPipeR_report_module","text":"generates exports interactive standalone html report output folder","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/SpectroPipeR_report_module.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SpectroPipeR: report module — SpectroPipeR_report_module","text":"","code":"#load library library(SpectroPipeR)  # use default parameters list params <- list(output_folder = \"../SpectroPipeR_test_folder\")  # example input file example_file_path <- system.file(\"extdata\",                                 \"SN_test_HYE_mix_file.tsv\",                                  package=\"SpectroPipeR\")  # step 1: load Spectronaut data module SpectroPipeR_data <- read_spectronaut_module(file = example_file_path,                                             parameter = params,                                             print.plot = FALSE)  # step 2: normalize & quantification module SpectroPipeR_data_quant <- norm_quant_module(SpectroPipeR_data = SpectroPipeR_data)  # step 3: MVA module SpectroPipeR_MVA <- MVA_module(SpectroPipeR_data_quant = SpectroPipeR_data_quant,           HCPC_analysis = FALSE)  # step 4: statistics module SpectroPipeR_data_stats <- statistics_module(SpectroPipeR_data_quant = SpectroPipeR_data_quant,                                             condition_comparisons = cbind(c(\"HYE mix A\",                                                                             \"HYE mix B\")))  # step 5: report module SpectroPipeR_report_module(SpectroPipeR_data = SpectroPipeR_data,                           SpectroPipeR_data_quant = SpectroPipeR_data_quant,                           SpectroPipeR_data_stats = SpectroPipeR_data_stats)"},{"path":"https://stemicha.github.io/SpectroPipeR/reference/Spectronaut_export_scheme.html","id":null,"dir":"Reference","previous_headings":"","what":"SpectroPipeR - Spectronaut report export scheme — Spectronaut_export_scheme","title":"SpectroPipeR - Spectronaut report export scheme — Spectronaut_export_scheme","text":"SpectroPipeR - Spectronaut report export scheme","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/Spectronaut_export_scheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SpectroPipeR - Spectronaut report export scheme — Spectronaut_export_scheme","text":"","code":"Spectronaut_export_scheme(output_location = \"\")"},{"path":"https://stemicha.github.io/SpectroPipeR/reference/Spectronaut_export_scheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SpectroPipeR - Spectronaut report export scheme — Spectronaut_export_scheme","text":"output_location folder location SpectroPipeR_report.rs report export scheme copied","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/Spectronaut_export_scheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SpectroPipeR - Spectronaut report export scheme — Spectronaut_export_scheme","text":"Generates Spectronaut report export template can imported Spectronaut, encompassing necessary columns SpectroPipeR needs Spectronaut export analyzed data.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/Spectronaut_export_scheme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SpectroPipeR - Spectronaut report export scheme — Spectronaut_export_scheme","text":"","code":"Spectronaut_export_scheme(output_location = \"../SpectroPipeR_test_folder\")"},{"path":"https://stemicha.github.io/SpectroPipeR/reference/XIC_plot_module.html","id":null,"dir":"Reference","previous_headings":"","what":"Extraction and plotting of XICs from Spectronaut's exported SQLite Databases (Spectronaut version > 18.7.240506.55695; XIC DB export generates one SQLite db file per raw file) — XIC_plot_module","title":"Extraction and plotting of XICs from Spectronaut's exported SQLite Databases (Spectronaut version > 18.7.240506.55695; XIC DB export generates one SQLite db file per raw file) — XIC_plot_module","text":"Exports user-selected protein group XIC (MS1/MS2) data PDF CSV formats detected ions.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/XIC_plot_module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extraction and plotting of XICs from Spectronaut's exported SQLite Databases (Spectronaut version > 18.7.240506.55695; XIC DB export generates one SQLite db file per raw file) — XIC_plot_module","text":"","code":"XIC_plot_module(   Spectronaut_report_path = NULL,   Spectronaut_xicDB_path = NULL,   protein_groups = NULL,   output_path = NULL,   export_csv_files = FALSE,   run_specific_y_axis = FALSE,   selected_conditions = NULL,   number_of_cores = 2 )"},{"path":"https://stemicha.github.io/SpectroPipeR/reference/XIC_plot_module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extraction and plotting of XICs from Spectronaut's exported SQLite Databases (Spectronaut version > 18.7.240506.55695; XIC DB export generates one SQLite db file per raw file) — XIC_plot_module","text":"Spectronaut_report_path file; Path pointing Spectronaut analysis report using SpectroPipeR report export scheme. Spectronaut_xicDB_path folder; Path pointing Spectronaut XIC SQLite database export folder analysis (use pipeline mode Spectronaut). protein_groups Vector containing user-selected protein group IDs generating plots. e.g. c(\"P38720\",\"P29311\") output_path Define output directory generated ion-specific plots (PDF) data tables (CSV) user-selected protein groups. export_csv_files Export individual CSV files per ion (boolean, default: FALSE). run_specific_y_axis XIC plot globally scaled y-axis run specific (default: FALSE) selected_conditions Vector user-selected conditions plotting (serves selection ordering). number_of_cores Define number CPU cores utilize parallel XIC extraction plotting.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/XIC_plot_module.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extraction and plotting of XICs from Spectronaut's exported SQLite Databases (Spectronaut version > 18.7.240506.55695; XIC DB export generates one SQLite db file per raw file) — XIC_plot_module","text":"Exports user-selected protein group XIC data (MS1/MS2) PDF CSV formats detected ions protein.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/XIC_plot_module.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extraction and plotting of XICs from Spectronaut's exported SQLite Databases (Spectronaut version > 18.7.240506.55695; XIC DB export generates one SQLite db file per raw file) — XIC_plot_module","text":"Description Spectronaut scores shown output plots: vertical dashed line plots indicate individual ApexRT, calculated based fragment XIC specific peptide precursor ion.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/XIC_plot_module.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extraction and plotting of XICs from Spectronaut's exported SQLite Databases (Spectronaut version > 18.7.240506.55695; XIC DB export generates one SQLite db file per raw file) — XIC_plot_module","text":"","code":"#setup example input paths / protein selection for plotting Spectronaut_report_path <- system.file(\"extdata/HYE_demo_data\",                                        \"HYE_demo_data_Report_SpectroPipeR.tsv\",                                         package=\"SpectroPipeR\") Spectronaut_xicDB_path <- system.file(\"extdata/HYE_demo_data/XIC_DBs\",package=\"SpectroPipeR\") protein_groups <- c(\"P29311\",\"P38720\") output_path <- \"../SpectroPipeR_test_folder/single_XIC_plots\"  # extracting and plotting of XIC XIC_plot_module(Spectronaut_report_path = Spectronaut_report_path,                 Spectronaut_xicDB_path = Spectronaut_xicDB_path,                 protein_groups = protein_groups,                 output_path = output_path,                 number_of_cores = 2 )"},{"path":"https://stemicha.github.io/SpectroPipeR/reference/norm_quant_module.html","id":null,"dir":"Reference","previous_headings":"","what":"SpectroPipeR: normalization & quantification module — norm_quant_module","title":"SpectroPipeR: normalization & quantification module — norm_quant_module","text":"Function normalizing quantifying Spectronaut output reports, serving second step pipeline building upon initial step reading Spectronaut data.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/norm_quant_module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SpectroPipeR: normalization & quantification module — norm_quant_module","text":"","code":"norm_quant_module(   SpectroPipeR_data = NULL,   batch_adjusting = FALSE,   sample__batch_meta_data_file = NULL,   batch_adjusting_column = \"\",   number_of_cores_adjusting = parallel::detectCores() - 2,   covariate_adjusting_formula = \"\",   covariate_adjusting_meta_data_file = \"\",   skipping_MaxLFQ_median_norm = FALSE,   costum_colors = NULL,   print.plot = FALSE )"},{"path":"https://stemicha.github.io/SpectroPipeR/reference/norm_quant_module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SpectroPipeR: normalization & quantification module — norm_quant_module","text":"SpectroPipeR_data SpectroPipeR_data list object generated read_spectronaut_module() function batch_adjusting logical - batch adjusting ComBat (sva package) performed; default = FALSE sample__batch_meta_data_file character - sample batch file; tab-delimited txt-file, containing \"R.FileName\" column e.g. sample__batch_meta_data_file = \"Sample_MetaData_Batches.txt\" example table batch meta data: good starting point generation table '*_ConditionSetup.tsv' Spectronaut Pipeline Report export folder batch_adjusting_column character - column name sample__batch_meta_data_file, used assigning samples batches number_of_cores_adjusting numeric - number processor cores used batch covariate adjustment covariate_adjusting_formula character - provide formula passed lm() covariate adjustment e.g. \"log10_peptide_intensity ~ log10(CRP)+log10(age)+.factor(sex)\"; may also use ns() function e.g. \"log10_peptide_intensity ~ ns(age, df=3)\" covariate_adjusting_meta_data_file covariate meta csv file, containing \"R.FileName; age; sex;...\"; may find start file 02_ID_rate folder > file_list.csv column e.g. covariate_adjusting_meta_data_file = \"covariate_MetaData_file.csv\" example table covariate meta data: skipping_MaxLFQ_median_norm logical - median normalization MaxLFQ calculation skipped; default = FALSE; applied MaxLFQ protein estimation selected costum_colors like use colors please provide named color vector (e.g. c(condition1 = \"black\", condition2 = \"grey\")); names naming length like conditions set Spectronaut print.plot logical - plot normalization factors printed","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/norm_quant_module.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SpectroPipeR: normalization & quantification module — norm_quant_module","text":"SpectroPipeR_norm_quant list object loaded raw data processed data tables, addition automatically saved tables plots description generated figures tables please read manual & vignettes","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/norm_quant_module.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SpectroPipeR: normalization & quantification module — norm_quant_module","text":"batch adjustment Batch effects refer systematic differences batches (groups) samples high-throughput experiments. differences can arise due various factors, batch variations sample preparation, handling, processing procedures measurement orders. Batch effects can obscure true biological signal lead incorrect conclusions properly accounted . SpectroPipeR pipeline, ComBat tool employed adjust batch effects datasets batch covariate known. ComBat utilizes methodology described Johnson et al. 2007. uses empirical Bayes (EB) framework adjusting data batch effects robust outliers small sample sizes performs comparable existing methods large samples. Johnson et al. 2007: method incorporates systematic batch biases common across genes making adjustments, assuming phenomena resulting batch effects often affect many genes similar ways (.e. increased expression, higher variability, etc). Specifically, L/S model parameters estimated represent batch effects pooling information across peptides batch shrink batch effect parameter estimates toward overall mean batch effect estimates (across genes). EB estimates used adjust data batch effects, providing robust adjustments batch effect peptide. SpectroPipeR parametric ComBAT emperical Bayes adjustment implemented utilizing sva-package. covariate adjustment covariate adjustment peptide intensity data performed using users input formula, linear mixed model (LMM) calculated based formula per peptide outcoming residuals added mean peptide intensity samples. means adjusted peptide intensities retain intensity level (low intense peptides keep low intensity high intense ions keep higher intensity).","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/norm_quant_module.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SpectroPipeR: normalization & quantification module — norm_quant_module","text":"","code":"#load library library(SpectroPipeR)  # use default parameters list params <- list(output_folder = \"../SpectroPipeR_test_folder\")  # example input file example_file_path <- system.file(\"extdata\",                                 \"SN_test_HYE_mix_file.tsv\",                                 package=\"SpectroPipeR\")  # step 1: load Spectronaut data module SpectroPipeR_data <- read_spectronaut_module(file = example_file_path,                                       parameter = params,                                       print.plot = FALSE)  # step 2: normalize & quantification module SpectroPipeR_data_quant <- norm_quant_module(SpectroPipeR_data = SpectroPipeR_data)"},{"path":"https://stemicha.github.io/SpectroPipeR/reference/read_spectronaut_module.html","id":null,"dir":"Reference","previous_headings":"","what":"SpectroPipeR: loading Spectronaut data module — read_spectronaut_module","title":"SpectroPipeR: loading Spectronaut data module — read_spectronaut_module","text":"Function loading Spectronaut data performing identification (ID) analysis, essential first step SpectroPipeR workflow.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/read_spectronaut_module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SpectroPipeR: loading Spectronaut data module — read_spectronaut_module","text":"","code":"read_spectronaut_module(   file = \"\",   ID_condition_filtering = FALSE,   ID_condition_filtering_percent = 0.5,   parameter = list(),   max_chars_file_name_capping = 35,   print.plot = FALSE )"},{"path":"https://stemicha.github.io/SpectroPipeR/reference/read_spectronaut_module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SpectroPipeR: loading Spectronaut data module — read_spectronaut_module","text":"file location (path) Spectronaut output report; use Spectronaut_export_scheme() function getting SpectroPipeR report scheme encompassing mandatory columns ID_condition_filtering TRUE FALSE condition-wise filtering performed ID_condition_filtering_percent (numerical value ranging 0 - 1, default = 0.5) define proportion condition-wise ID filtering parameter mandatory parameter list element table list elements: max_chars_file_name_capping integer, (default = 35) number max characters used raw file name presentation; must adjusted function print.plot TRUE --> printing ID plot ion level coloring corresponds ID outlier estimate \"id_drop_cutoff\" variable","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/read_spectronaut_module.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SpectroPipeR: loading Spectronaut data module — read_spectronaut_module","text":"SpectroPipeR_data list object loaded raw data processed data tables, addition automatically saved tables plots. description generated figures tables please read manual & vignettes","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/read_spectronaut_module.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SpectroPipeR: loading Spectronaut data module — read_spectronaut_module","text":"","code":"#load library library(SpectroPipeR)  # use default parameters list params <- list(output_folder = \"../SpectroPipeR_test_folder\")  # example input file example_file_path <- system.file(\"extdata\",                                 \"SN_test_HYE_mix_file.tsv\",                                 package=\"SpectroPipeR\")  # step 1: load Spectronaut data module SpectroPipeR_data <- read_spectronaut_module(file = example_file_path,                                             parameter = params,                                             print.plot = FALSE)"},{"path":"https://stemicha.github.io/SpectroPipeR/reference/statistics_module.html","id":null,"dir":"Reference","previous_headings":"","what":"SpectroPipeR: statistics module — statistics_module","title":"SpectroPipeR: statistics module — statistics_module","text":"Function performing statistical analysis Spectronaut output reports, representing fourth step pipeline dependent normalization quantification module output step 2.","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/statistics_module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SpectroPipeR: statistics module — statistics_module","text":"","code":"statistics_module(   SpectroPipeR_data_quant = NULL,   condition_comparisons = NULL,   number_of_cores = 2 )"},{"path":"https://stemicha.github.io/SpectroPipeR/reference/statistics_module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SpectroPipeR: statistics module — statistics_module","text":"SpectroPipeR_data_quant SpectroPipeR_data_quant list object norm_quant_module() object e.g. SpectroPipeR_data_quant see example condition_comparisons condition comparisons pairwise- comparison; e.g. condition_comparisons <- cbind(c(\"condition1\",\"control\"),c(\"condition3\",\"control\") ) number_of_cores number processor cores used calculations default = 2; parallel::detectCores()-2 faster processing (detect number cores system use nearly cores)","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/statistics_module.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SpectroPipeR: statistics module — statistics_module","text":"SpectroPipeR_statistics list element containing statistics analysis results addition automatically generated plots tables output folder description generated figures tables please read manual & vignettes","code":""},{"path":"https://stemicha.github.io/SpectroPipeR/reference/statistics_module.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SpectroPipeR: statistics module — statistics_module","text":"","code":"#load library library(SpectroPipeR)  # use default parameters list params <- list(output_folder = \"../SpectroPipeR_test_folder\")  # example input file example_file_path <- system.file(\"extdata\",                                 \"SN_test_HYE_mix_file.tsv\",                                 package=\"SpectroPipeR\")  # step 1: load Spectronaut data module SpectroPipeR_data <- read_spectronaut_module(file = example_file_path,                                             parameter = params,                                             print.plot = FALSE)  # step 2: normalize & quantification module SpectroPipeR_data_quant <- norm_quant_module(SpectroPipeR_data = SpectroPipeR_data)  # step 3: MVA module SpectroPipeR_data_MVA <- MVA_module(SpectroPipeR_data_quant = SpectroPipeR_data_quant,           HCPC_analysis = FALSE)  # step 4: statistics module SpectroPipeR_data_stats <- statistics_module(SpectroPipeR_data_quant = SpectroPipeR_data_quant,                                             condition_comparisons = cbind(c(\"HYE mix A\",                                                                             \"HYE mix B\")                                                                           )                                             )"}]
